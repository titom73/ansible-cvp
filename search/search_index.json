{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ansible Modules for Arista CloudVision Platform # About # Arista Networks supports Ansible for managing devices running the EOS operating system through CloudVision platform (CVP) . This roles includes a set of ansible modules that perform specific configuration tasks on CVP server. These tasks include: collecting facts, managing configlets, containers, build provisionning topology and running tasks. Requirements # Arista CloudVision: CloudVision 2018.2.5 or later Python: Python 3.6.8 or later Additional Python Libraries required: requests >= 2.22.0 treelib version 1.5.5 or later Supported Ansible Versions: ansible 2.9 or later Installation # pip install requests> = 2 .22.0 pip install treelib> = 1 .5.5 Ansible galaxy hosts all stable version of this collection. Installation from ansible-galaxy is the most convenient approach for consuming arista.cvp content $ ansible-galaxy collection install arista.cvp Process install dependency map Starting collection install process Installing 'arista.cvp:1.0.3' to '~/.ansible/collections/ansible_collections/arista/cvp' Modules overview # This repository provides content for Ansible\u2019s collection arista.cvp with following content: arista.cvp.cv_facts - Collect CVP facts from server like list of containers, devices, configlet and tasks. arista.cvp.cv_configlet - Manage configlet configured on CVP. arista.cvp.cv_container - Manage container topology and attach configlet and devices to containers. arista.cvp.cv_device - Manage devices configured on CVP arista.cvp.cv_task - Run tasks created on CVP. List of available roles: arista.cvp.dhcp_configuration - Configure DHCPD service on a Cloudvision server or any dhcpd service. This collection supports CVP version >= 2018.2.5 Example # Create containers on CloudVision # --- - name : Build Switch configuration hosts : DC1_FABRIC connection : local gather_facts : no vars : CVP_CONTAINERS : DC1_LEAF1 : parent_container : DC1_L3LEAFS DC1_FABRIC : parent_container : Tenant DC1_L3LEAFS : parent_container : DC1_FABRIC DC1_LEAF2 : parent_container : DC1_L3LEAFS DC1_SPINES : parent_container : DC1_FABRIC tasks : - name : 'Collecting facts from CVP {{inventory_hostname}}.' arista.cvp.cv_facts : register : CVP_FACTS - name : \"Building Container topology on {{inventory_hostname}}\" tags : [ provision ] arista.cvp.cv_container : topology : '{{CVP_CONTAINERS}}' cvp_facts : '{{CVP_FACTS.ansible_facts}}' Create Configlets on CloudVision # --- - name : Build Switch configuration hosts : DC1_FABRIC connection : local gather_facts : no vars : CVP_CONFIGLETS : ANSIBLE_TESTING_CONTAINER : \"alias a{{ 999 | random }} show version\" ANSIBLE_TESTING_VEOS : \"alias a{{ 999 | random }} show version\" tasks : - name : 'Collecting facts from CVP {{inventory_hostname}}.' arista.cvp.cv_facts : register : CVP_FACTS - name : 'Create configlets on CVP {{inventory_hostname}}.' arista.cvp.cv_configlet : cvp_facts : \"{{CVP_FACTS.ansible_facts}}\" configlets : \"{{CVP_CONFIGLETS}}\" configlet_filter : [ \"_TESTING_\" ] Configure devices on CloudVision # --- - name : Build Switch configuration hosts : DC1_FABRIC connection : local gather_facts : no vars : CVP_DEVICES : DC1-SPINE1 : name : DC1-SPINE1 parent_container : DC1_SPINES configlets : - AVD_DC1-SPINE1 imageBundle : [] DC1-SPINE2 : name : DC1-SPINE2 parent_container : DC1_SPINES configlets : - AVD_DC1-SPINE2 imageBundle : [] tasks : - name : 'Collecting facts from CVP {{inventory_hostname}}.' arista.cvp.cv_facts : register : CVP_FACTS - name : \"Configure devices on {{inventory_hostname}}\" arista.cvp.cv_device : devices : \"{{CVP_DEVICES}}\" cvp_facts : '{{CVP_FACTS.ansible_facts}}' device_filter : [ 'DC1' ] state : present More documentation on github repository License # Project is published under Apache License . Ask a question # Support for this arista.cvp collection is provided by the community directly in this repository. Easiest way to get support is to open an issue . Contributing # Contributing pull requests are gladly welcomed for this repository. If you are planning a big change, please start a discussion first to make sure we\u2019ll be able to merge it. You can also open an issue to report any problem or to submit enhancement. A more complete guide for contribution is available in the repository","title":"Home"},{"location":"#ansible-modules-for-arista-cloudvision-platform","text":"","title":"Ansible Modules for Arista CloudVision Platform"},{"location":"#about","text":"Arista Networks supports Ansible for managing devices running the EOS operating system through CloudVision platform (CVP) . This roles includes a set of ansible modules that perform specific configuration tasks on CVP server. These tasks include: collecting facts, managing configlets, containers, build provisionning topology and running tasks.","title":"About"},{"location":"#requirements","text":"Arista CloudVision: CloudVision 2018.2.5 or later Python: Python 3.6.8 or later Additional Python Libraries required: requests >= 2.22.0 treelib version 1.5.5 or later Supported Ansible Versions: ansible 2.9 or later","title":"Requirements"},{"location":"#installation","text":"pip install requests> = 2 .22.0 pip install treelib> = 1 .5.5 Ansible galaxy hosts all stable version of this collection. Installation from ansible-galaxy is the most convenient approach for consuming arista.cvp content $ ansible-galaxy collection install arista.cvp Process install dependency map Starting collection install process Installing 'arista.cvp:1.0.3' to '~/.ansible/collections/ansible_collections/arista/cvp'","title":"Installation"},{"location":"#modules-overview","text":"This repository provides content for Ansible\u2019s collection arista.cvp with following content: arista.cvp.cv_facts - Collect CVP facts from server like list of containers, devices, configlet and tasks. arista.cvp.cv_configlet - Manage configlet configured on CVP. arista.cvp.cv_container - Manage container topology and attach configlet and devices to containers. arista.cvp.cv_device - Manage devices configured on CVP arista.cvp.cv_task - Run tasks created on CVP. List of available roles: arista.cvp.dhcp_configuration - Configure DHCPD service on a Cloudvision server or any dhcpd service. This collection supports CVP version >= 2018.2.5","title":"Modules overview"},{"location":"#example","text":"","title":"Example"},{"location":"#create-containers-on-cloudvision","text":"--- - name : Build Switch configuration hosts : DC1_FABRIC connection : local gather_facts : no vars : CVP_CONTAINERS : DC1_LEAF1 : parent_container : DC1_L3LEAFS DC1_FABRIC : parent_container : Tenant DC1_L3LEAFS : parent_container : DC1_FABRIC DC1_LEAF2 : parent_container : DC1_L3LEAFS DC1_SPINES : parent_container : DC1_FABRIC tasks : - name : 'Collecting facts from CVP {{inventory_hostname}}.' arista.cvp.cv_facts : register : CVP_FACTS - name : \"Building Container topology on {{inventory_hostname}}\" tags : [ provision ] arista.cvp.cv_container : topology : '{{CVP_CONTAINERS}}' cvp_facts : '{{CVP_FACTS.ansible_facts}}'","title":"Create containers on CloudVision"},{"location":"#create-configlets-on-cloudvision","text":"--- - name : Build Switch configuration hosts : DC1_FABRIC connection : local gather_facts : no vars : CVP_CONFIGLETS : ANSIBLE_TESTING_CONTAINER : \"alias a{{ 999 | random }} show version\" ANSIBLE_TESTING_VEOS : \"alias a{{ 999 | random }} show version\" tasks : - name : 'Collecting facts from CVP {{inventory_hostname}}.' arista.cvp.cv_facts : register : CVP_FACTS - name : 'Create configlets on CVP {{inventory_hostname}}.' arista.cvp.cv_configlet : cvp_facts : \"{{CVP_FACTS.ansible_facts}}\" configlets : \"{{CVP_CONFIGLETS}}\" configlet_filter : [ \"_TESTING_\" ]","title":"Create Configlets on CloudVision"},{"location":"#configure-devices-on-cloudvision","text":"--- - name : Build Switch configuration hosts : DC1_FABRIC connection : local gather_facts : no vars : CVP_DEVICES : DC1-SPINE1 : name : DC1-SPINE1 parent_container : DC1_SPINES configlets : - AVD_DC1-SPINE1 imageBundle : [] DC1-SPINE2 : name : DC1-SPINE2 parent_container : DC1_SPINES configlets : - AVD_DC1-SPINE2 imageBundle : [] tasks : - name : 'Collecting facts from CVP {{inventory_hostname}}.' arista.cvp.cv_facts : register : CVP_FACTS - name : \"Configure devices on {{inventory_hostname}}\" arista.cvp.cv_device : devices : \"{{CVP_DEVICES}}\" cvp_facts : '{{CVP_FACTS.ansible_facts}}' device_filter : [ 'DC1' ] state : present More documentation on github repository","title":"Configure devices on CloudVision"},{"location":"#license","text":"Project is published under Apache License .","title":"License"},{"location":"#ask-a-question","text":"Support for this arista.cvp collection is provided by the community directly in this repository. Easiest way to get support is to open an issue .","title":"Ask a question"},{"location":"#contributing","text":"Contributing pull requests are gladly welcomed for this repository. If you are planning a big change, please start a discussion first to make sure we\u2019ll be able to merge it. You can also open an issue to report any problem or to submit enhancement. A more complete guide for contribution is available in the repository","title":"Contributing"},{"location":"docs/module_docs/cv_configlet.rst/","text":"cv_configlet # Create, Delete, or Update CloudVision Portal Configlets. Module added in version .. versionadded:: 2.9 Synopsis # CloudVison Portal Configlet compares the list of configlets and config in configlets against cvp-facts then adds, deletes, or updates them as appropriate. If a configlet is in cvp_facts but not in configlets it will be deleted. If a configlet is in configlets but not in cvp_facts it will be created. If a configlet is in both configlets and cvp_facts it configuration will be compared and updated with the version in configlets if the two are different. Module-specific Options # The following options may be specified for this module: parameter type required default choices comments configlet_filter list no ['none'] Filter to apply intended mode on a set of configlet. If not used, then module only uses ADD mode. configlet_filter list configlets that can be modified or deleted based on configlets entries. configlets dict yes List of configlets to managed on CVP server. cvp_facts dict yes Facts extracted from CVP servers using cv_facts module state str no present present absent If absent, configlets will be removed from CVP if they are not bound to either a container or a device. If present, configlets will be created or updated. Examples # : --- - name: Test cv_configlet_v2 hosts: cvp connection: local gather_facts: no vars: configlet_list: Test_Configlet: \"! This is a Very First Testing Configlet\\n!\" Test_DYNAMIC_Configlet: \"{{ lookup('file', 'templates/configlet_'+inventory_hostname+'.txt') }}\" tasks: - name: 'Collecting facts from CVP {{inventory_hostname}}.' tags: - always cv_facts: register: cvp_facts - name: 'Create configlets on CVP {{inventory_hostname}}.' tags: - provision cv_configlet: cvp_facts: \"{{cvp_facts.ansible_facts}}\" configlets: \"{{configlet_list}}\" configlet_filter: [\"New\", \"Test\",\"base-chk\",\"base-firewall\"] register: cvp_configlet Author # EMEA AS Team (@aristanetworks) Status # This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Module cv_configlet"},{"location":"docs/module_docs/cv_configlet.rst/#cv_configlet","text":"Create, Delete, or Update CloudVision Portal Configlets. Module added in version .. versionadded:: 2.9","title":"cv_configlet"},{"location":"docs/module_docs/cv_configlet.rst/#synopsis","text":"CloudVison Portal Configlet compares the list of configlets and config in configlets against cvp-facts then adds, deletes, or updates them as appropriate. If a configlet is in cvp_facts but not in configlets it will be deleted. If a configlet is in configlets but not in cvp_facts it will be created. If a configlet is in both configlets and cvp_facts it configuration will be compared and updated with the version in configlets if the two are different.","title":"Synopsis"},{"location":"docs/module_docs/cv_configlet.rst/#module-specific-options","text":"The following options may be specified for this module: parameter type required default choices comments configlet_filter list no ['none'] Filter to apply intended mode on a set of configlet. If not used, then module only uses ADD mode. configlet_filter list configlets that can be modified or deleted based on configlets entries. configlets dict yes List of configlets to managed on CVP server. cvp_facts dict yes Facts extracted from CVP servers using cv_facts module state str no present present absent If absent, configlets will be removed from CVP if they are not bound to either a container or a device. If present, configlets will be created or updated.","title":"Module-specific Options"},{"location":"docs/module_docs/cv_configlet.rst/#examples","text":": --- - name: Test cv_configlet_v2 hosts: cvp connection: local gather_facts: no vars: configlet_list: Test_Configlet: \"! This is a Very First Testing Configlet\\n!\" Test_DYNAMIC_Configlet: \"{{ lookup('file', 'templates/configlet_'+inventory_hostname+'.txt') }}\" tasks: - name: 'Collecting facts from CVP {{inventory_hostname}}.' tags: - always cv_facts: register: cvp_facts - name: 'Create configlets on CVP {{inventory_hostname}}.' tags: - provision cv_configlet: cvp_facts: \"{{cvp_facts.ansible_facts}}\" configlets: \"{{configlet_list}}\" configlet_filter: [\"New\", \"Test\",\"base-chk\",\"base-firewall\"] register: cvp_configlet","title":"Examples"},{"location":"docs/module_docs/cv_configlet.rst/#author","text":"EMEA AS Team (@aristanetworks)","title":"Author"},{"location":"docs/module_docs/cv_configlet.rst/#status","text":"This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Status"},{"location":"docs/module_docs/cv_container.rst/","text":"cv_container # Manage Provisioning topology. Module added in version .. versionadded:: 2.9 Synopsis # CloudVision Portal Configlet configuration requires a dictionary of containers with their parent, to create and delete containers on CVP side. Returns number of created and/or deleted containers Module-specific Options # The following options may be specified for this module: parameter type required default choices comments cvp_facts dict yes Facts from CVP collected by cv_facts module mode str no merge merge override delete Allow to save topology or not topology dict yes Yaml dictionary to describe intended containers Examples # : - name: Create container topology on CVP hosts: cvp connection: local gather_facts: no vars: verbose: False containers: Fabric: parent_container: Tenant Spines: parent_container: Fabric configlets: - container_configlet images: - 4.22.0F devices: - veos01 tasks: - name: \"Gather CVP facts {{inventory_hostname}}\" cv_facts: register: cvp_facts - name: \"Build Container topology on {{inventory_hostname}}\" cv_container: cvp_facts: '{{cvp_facts.ansible_facts}}' Author # EMEA AS Team (@aristanetworks) Status # This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Module cv_container"},{"location":"docs/module_docs/cv_container.rst/#cv_container","text":"Manage Provisioning topology. Module added in version .. versionadded:: 2.9","title":"cv_container"},{"location":"docs/module_docs/cv_container.rst/#synopsis","text":"CloudVision Portal Configlet configuration requires a dictionary of containers with their parent, to create and delete containers on CVP side. Returns number of created and/or deleted containers","title":"Synopsis"},{"location":"docs/module_docs/cv_container.rst/#module-specific-options","text":"The following options may be specified for this module: parameter type required default choices comments cvp_facts dict yes Facts from CVP collected by cv_facts module mode str no merge merge override delete Allow to save topology or not topology dict yes Yaml dictionary to describe intended containers","title":"Module-specific Options"},{"location":"docs/module_docs/cv_container.rst/#examples","text":": - name: Create container topology on CVP hosts: cvp connection: local gather_facts: no vars: verbose: False containers: Fabric: parent_container: Tenant Spines: parent_container: Fabric configlets: - container_configlet images: - 4.22.0F devices: - veos01 tasks: - name: \"Gather CVP facts {{inventory_hostname}}\" cv_facts: register: cvp_facts - name: \"Build Container topology on {{inventory_hostname}}\" cv_container: cvp_facts: '{{cvp_facts.ansible_facts}}'","title":"Examples"},{"location":"docs/module_docs/cv_container.rst/#author","text":"EMEA AS Team (@aristanetworks)","title":"Author"},{"location":"docs/module_docs/cv_container.rst/#status","text":"This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Status"},{"location":"docs/module_docs/cv_device.rst/","text":"cv_device # Provision, Reset, or Update CloudVision Portal Devices. Module added in version .. versionadded:: 2.9 Synopsis # CloudVison Portal Device compares the list of Devices in in devices against cvp-facts then adds, resets, or updates them as appropriate. If a device is in cvp_facts but not in devices it will be reset to factory defaults If a device is in devices but not in cvp_facts it will be provisioned If a device is in both devices and cvp_facts its configlets and imageBundles will be compared and updated with the version in devices if the two are different. Module-specific Options # The following options may be specified for this module: parameter type required default choices comments configlet_mode str no override override merge delete If override, Add listed configlets and remove all unlisted ones. If merge, Add listed configlets to device and do not touch already configured configlets. cvp_facts dict yes Facts from CVP collected by cv_facts module device_filter list no ['all'] Filter to apply intended mode on a set of configlet. If not used, then module only uses ADD mode. device_filter list devices that can be modified or deleted based on configlets entries. devices dict yes Yaml dictionary to describe intended devices configuration from CVP stand point. state str no present present absent If absent, devices will be removed from CVP and moved back to undefined. If present, devices will be configured or updated. Examples # : --- - name: Test cv_device hosts: cvp connection: local gather_facts: no collections: - arista.cvp vars: configlet_list: cv_device_test01: \"alias a{{ 999 | random }} show version\" cv_device_test02: \"alias a{{ 999 | random }} show version\" # Device inventory for provision activity: bind configlet devices_inventory: veos01: name: veos01 configlets: - cv_device_test01 - SYS_TelemetryBuilderV2_172.23.0.2_1 - veos01-basic-configuration - SYS_TelemetryBuilderV2 tasks: # Collect CVP Facts as init process - name: \"Gather CVP facts from {{inventory_hostname}}\" cv_facts: register: cvp_facts tags: - always - name: \"Configure devices on {{inventory_hostname}}\" tags: - provision cv_device: devices: \"{{devices_inventory}}\" cvp_facts: '{{cvp_facts.ansible_facts}}' device_filter: ['veos'] register: cvp_device - name: \"Add configlet to device on {{inventory_hostname}}\" tags: - provision cv_device: devices: \"{{devices_inventory}}\" cvp_facts: '{{cvp_facts.ansible_facts}}' configlet_mode: merge device_filter: ['veos'] register: cvp_device Author # EMEA AS Team (@aristanetworks) Status # This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Module cv_device"},{"location":"docs/module_docs/cv_device.rst/#cv_device","text":"Provision, Reset, or Update CloudVision Portal Devices. Module added in version .. versionadded:: 2.9","title":"cv_device"},{"location":"docs/module_docs/cv_device.rst/#synopsis","text":"CloudVison Portal Device compares the list of Devices in in devices against cvp-facts then adds, resets, or updates them as appropriate. If a device is in cvp_facts but not in devices it will be reset to factory defaults If a device is in devices but not in cvp_facts it will be provisioned If a device is in both devices and cvp_facts its configlets and imageBundles will be compared and updated with the version in devices if the two are different.","title":"Synopsis"},{"location":"docs/module_docs/cv_device.rst/#module-specific-options","text":"The following options may be specified for this module: parameter type required default choices comments configlet_mode str no override override merge delete If override, Add listed configlets and remove all unlisted ones. If merge, Add listed configlets to device and do not touch already configured configlets. cvp_facts dict yes Facts from CVP collected by cv_facts module device_filter list no ['all'] Filter to apply intended mode on a set of configlet. If not used, then module only uses ADD mode. device_filter list devices that can be modified or deleted based on configlets entries. devices dict yes Yaml dictionary to describe intended devices configuration from CVP stand point. state str no present present absent If absent, devices will be removed from CVP and moved back to undefined. If present, devices will be configured or updated.","title":"Module-specific Options"},{"location":"docs/module_docs/cv_device.rst/#examples","text":": --- - name: Test cv_device hosts: cvp connection: local gather_facts: no collections: - arista.cvp vars: configlet_list: cv_device_test01: \"alias a{{ 999 | random }} show version\" cv_device_test02: \"alias a{{ 999 | random }} show version\" # Device inventory for provision activity: bind configlet devices_inventory: veos01: name: veos01 configlets: - cv_device_test01 - SYS_TelemetryBuilderV2_172.23.0.2_1 - veos01-basic-configuration - SYS_TelemetryBuilderV2 tasks: # Collect CVP Facts as init process - name: \"Gather CVP facts from {{inventory_hostname}}\" cv_facts: register: cvp_facts tags: - always - name: \"Configure devices on {{inventory_hostname}}\" tags: - provision cv_device: devices: \"{{devices_inventory}}\" cvp_facts: '{{cvp_facts.ansible_facts}}' device_filter: ['veos'] register: cvp_device - name: \"Add configlet to device on {{inventory_hostname}}\" tags: - provision cv_device: devices: \"{{devices_inventory}}\" cvp_facts: '{{cvp_facts.ansible_facts}}' configlet_mode: merge device_filter: ['veos'] register: cvp_device","title":"Examples"},{"location":"docs/module_docs/cv_device.rst/#author","text":"EMEA AS Team (@aristanetworks)","title":"Author"},{"location":"docs/module_docs/cv_device.rst/#status","text":"This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Status"},{"location":"docs/module_docs/cv_device_v1.rst/","text":"cv_device_v1 # Provision, Reset, or Update CloudVision Portal Devices. Module added in version .. versionadded:: 2.9 Synopsis # CloudVison Portal Device compares the list of Devices in in devices against cvp-facts then adds, resets, or updates them as appropriate. If a device is in cvp_facts but not in devices it will be reset to factory defaults If a device is in devices but not in cvp_facts it will be provisioned If a device is in both devices and cvp_facts its configlets and imageBundles will be compared and updated with the version in devices if the two are different. Module-specific Options # The following options may be specified for this module: parameter type required default choices comments cvp_facts dict yes Facts from CVP collected by cv_facts module device_filter list no ['none'] Filter to apply intended mode on a set of configlet. If not used, then module only uses ADD mode. device_filter list devices that can be modified or deleted based on configlets entries. devices dict yes Yaml dictionary to describe intended devices configuration from CVP stand point. state str no present present absent If absent, devices will be removed from CVP and moved back to undefined. If present, devices will be configured or updated. Examples # : --- - name: Test cv_device hosts: cvp connection: local gather_facts: no collections: - arista.cvp vars: configlet_list: cv_device_test01: \"alias a{{ 999 | random }} show version\" cv_device_test02: \"alias a{{ 999 | random }} show version\" # Device inventory for provision activity: bind configlet devices_inventory: veos01: name: veos01 configlets: - cv_device_test01 - SYS_TelemetryBuilderV2_172.23.0.2_1 - veos01-basic-configuration - SYS_TelemetryBuilderV2 tasks: # Collect CVP Facts as init process - name: \"Gather CVP facts from {{inventory_hostname}}\" cv_facts: register: cvp_facts tags: - always - name: \"Configure devices on {{inventory_hostname}}\" tags: - provision cv_device: devices: \"{{devices_inventory}}\" cvp_facts: '{{cvp_facts.ansible_facts}}' device_filter: ['veos'] register: cvp_device Author # EMEA AS Team (@aristanetworks) Status # This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"cv\\_device\\_v1"},{"location":"docs/module_docs/cv_device_v1.rst/#cv_device_v1","text":"Provision, Reset, or Update CloudVision Portal Devices. Module added in version .. versionadded:: 2.9","title":"cv_device_v1"},{"location":"docs/module_docs/cv_device_v1.rst/#synopsis","text":"CloudVison Portal Device compares the list of Devices in in devices against cvp-facts then adds, resets, or updates them as appropriate. If a device is in cvp_facts but not in devices it will be reset to factory defaults If a device is in devices but not in cvp_facts it will be provisioned If a device is in both devices and cvp_facts its configlets and imageBundles will be compared and updated with the version in devices if the two are different.","title":"Synopsis"},{"location":"docs/module_docs/cv_device_v1.rst/#module-specific-options","text":"The following options may be specified for this module: parameter type required default choices comments cvp_facts dict yes Facts from CVP collected by cv_facts module device_filter list no ['none'] Filter to apply intended mode on a set of configlet. If not used, then module only uses ADD mode. device_filter list devices that can be modified or deleted based on configlets entries. devices dict yes Yaml dictionary to describe intended devices configuration from CVP stand point. state str no present present absent If absent, devices will be removed from CVP and moved back to undefined. If present, devices will be configured or updated.","title":"Module-specific Options"},{"location":"docs/module_docs/cv_device_v1.rst/#examples","text":": --- - name: Test cv_device hosts: cvp connection: local gather_facts: no collections: - arista.cvp vars: configlet_list: cv_device_test01: \"alias a{{ 999 | random }} show version\" cv_device_test02: \"alias a{{ 999 | random }} show version\" # Device inventory for provision activity: bind configlet devices_inventory: veos01: name: veos01 configlets: - cv_device_test01 - SYS_TelemetryBuilderV2_172.23.0.2_1 - veos01-basic-configuration - SYS_TelemetryBuilderV2 tasks: # Collect CVP Facts as init process - name: \"Gather CVP facts from {{inventory_hostname}}\" cv_facts: register: cvp_facts tags: - always - name: \"Configure devices on {{inventory_hostname}}\" tags: - provision cv_device: devices: \"{{devices_inventory}}\" cvp_facts: '{{cvp_facts.ansible_facts}}' device_filter: ['veos'] register: cvp_device","title":"Examples"},{"location":"docs/module_docs/cv_device_v1.rst/#author","text":"EMEA AS Team (@aristanetworks)","title":"Author"},{"location":"docs/module_docs/cv_device_v1.rst/#status","text":"This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Status"},{"location":"docs/module_docs/cv_facts.rst/","text":"cv_facts # Collect facts from CloudVision Portal. Module added in version .. versionadded:: 2.9 Synopsis # Returns list of devices, configlets, containers and images Module-specific Options # The following options may be specified for this module: parameter type required default choices comments facts list no ['all'] all devices containers configlets tasks List of facts to retrieve from CVP. By default, cv_facts returns facts for devices/configlets/containers/tasks Using this parameter allows user to limit scope to a subet of information. gather_subset list no ['default'] default config tasks_pending tasks_failed tasks_all When supplied, this argument will restrict the facts collected to a given subset. Possible values for this argument include all, hardware, config, and interfaces. Can specify a list of values to include a larger subset. Values can also be used with an initial ! to specify that a specific subset should not be collected. Examples # : --- tasks: - name: '#01 - Collect devices facts from {{inventory_hostname}}' cv_facts: facts: devices register: FACTS_DEVICES - name: '#02 - Collect devices facts (with config) from {{inventory_hostname}}' cv_facts: gather_subset: config facts: devices register: FACTS_DEVICES_CONFIG - name: '#03 - Collect confilgets facts from {{inventory_hostname}}' cv_facts: facts: configlets register: FACTS_CONFIGLETS - name: '#04 - Collect containers facts from {{inventory_hostname}}' cv_facts: facts: containers register: FACTS_CONTAINERS - name: '#10 - Collect ALL facts from {{inventory_hostname}}' cv_facts: register: FACTS Author # EMEA AS Team (@aristanetworks) Status # This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Module cv_facts"},{"location":"docs/module_docs/cv_facts.rst/#cv_facts","text":"Collect facts from CloudVision Portal. Module added in version .. versionadded:: 2.9","title":"cv_facts"},{"location":"docs/module_docs/cv_facts.rst/#synopsis","text":"Returns list of devices, configlets, containers and images","title":"Synopsis"},{"location":"docs/module_docs/cv_facts.rst/#module-specific-options","text":"The following options may be specified for this module: parameter type required default choices comments facts list no ['all'] all devices containers configlets tasks List of facts to retrieve from CVP. By default, cv_facts returns facts for devices/configlets/containers/tasks Using this parameter allows user to limit scope to a subet of information. gather_subset list no ['default'] default config tasks_pending tasks_failed tasks_all When supplied, this argument will restrict the facts collected to a given subset. Possible values for this argument include all, hardware, config, and interfaces. Can specify a list of values to include a larger subset. Values can also be used with an initial ! to specify that a specific subset should not be collected.","title":"Module-specific Options"},{"location":"docs/module_docs/cv_facts.rst/#examples","text":": --- tasks: - name: '#01 - Collect devices facts from {{inventory_hostname}}' cv_facts: facts: devices register: FACTS_DEVICES - name: '#02 - Collect devices facts (with config) from {{inventory_hostname}}' cv_facts: gather_subset: config facts: devices register: FACTS_DEVICES_CONFIG - name: '#03 - Collect confilgets facts from {{inventory_hostname}}' cv_facts: facts: configlets register: FACTS_CONFIGLETS - name: '#04 - Collect containers facts from {{inventory_hostname}}' cv_facts: facts: containers register: FACTS_CONTAINERS - name: '#10 - Collect ALL facts from {{inventory_hostname}}' cv_facts: register: FACTS","title":"Examples"},{"location":"docs/module_docs/cv_facts.rst/#author","text":"EMEA AS Team (@aristanetworks)","title":"Author"},{"location":"docs/module_docs/cv_facts.rst/#status","text":"This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Status"},{"location":"docs/module_docs/cv_facts_v1.rst/","text":"cv_facts_v1 # Collect facts from CloudVision Portal. Module added in version .. versionadded:: 2.9 Synopsis # Returns the list of devices, configlets, containers and images Module-specific Options # The following options may be specified for this module: parameter type required default choices comments gather_subset list no ['default'] default config When supplied, this argument will restrict the facts collected to a given subset. Possible values for this argument include all, hardware, config, and interfaces. Can specify a list of values to include a larger subset. Values can also be used with an initial ! to specify that a specific subset should not be collected. Examples # : --- # Collect CVP Facts as init process - name: \"Gather CVP facts from {{inventory_hostname}}\" arista.cvp.cv_facts_v1: register: cvp_facts Author # EMEA AS Team (@aristanetworks) Status # This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"cv\\_facts\\_v1"},{"location":"docs/module_docs/cv_facts_v1.rst/#cv_facts_v1","text":"Collect facts from CloudVision Portal. Module added in version .. versionadded:: 2.9","title":"cv_facts_v1"},{"location":"docs/module_docs/cv_facts_v1.rst/#synopsis","text":"Returns the list of devices, configlets, containers and images","title":"Synopsis"},{"location":"docs/module_docs/cv_facts_v1.rst/#module-specific-options","text":"The following options may be specified for this module: parameter type required default choices comments gather_subset list no ['default'] default config When supplied, this argument will restrict the facts collected to a given subset. Possible values for this argument include all, hardware, config, and interfaces. Can specify a list of values to include a larger subset. Values can also be used with an initial ! to specify that a specific subset should not be collected.","title":"Module-specific Options"},{"location":"docs/module_docs/cv_facts_v1.rst/#examples","text":": --- # Collect CVP Facts as init process - name: \"Gather CVP facts from {{inventory_hostname}}\" arista.cvp.cv_facts_v1: register: cvp_facts","title":"Examples"},{"location":"docs/module_docs/cv_facts_v1.rst/#author","text":"EMEA AS Team (@aristanetworks)","title":"Author"},{"location":"docs/module_docs/cv_facts_v1.rst/#status","text":"This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Status"},{"location":"docs/module_docs/cv_task.rst/","text":"cv_task # Execute or Cancel CVP Tasks. Module added in version .. versionadded:: 2.9 Synopsis # CloudVison Portal Task module Module-specific Options # The following options may be specified for this module: parameter type required default choices comments state str no executed executed cancelled action to carry out on the task executed - execute tasks cancelled - cancel tasks tasks list yes CVP taskIDs to act on wait int no 0 Time to wait for tasks to transition to 'Completed' Examples # : --- - name: Execute all tasks registered in cvp_configlets variable arista.cvp.cv_task: tasks: \"{{ cvp_configlets.data.tasks }}\" - name: Cancel a list of pending tasks arista.cvp.cv_task: tasks: \"{{ cvp_configlets.data.tasks }}\" state: cancelled # Execute all pending tasks and wait for completion for 60 seconds # In order to get a list of all pending tasks, execute cv_facts first - name: Update cvp facts arista.cvp.cv_facts: - name: Execute all pending tasks and wait for completion for 60 seconds arista.cvp.cv_task: port: '{{cvp_port}}' tasks: \"{{ tasks }}\" wait: 60 Author # EMEA AS Team (@aristanetworks) Status # This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"cv\\_task"},{"location":"docs/module_docs/cv_task.rst/#cv_task","text":"Execute or Cancel CVP Tasks. Module added in version .. versionadded:: 2.9","title":"cv_task"},{"location":"docs/module_docs/cv_task.rst/#synopsis","text":"CloudVison Portal Task module","title":"Synopsis"},{"location":"docs/module_docs/cv_task.rst/#module-specific-options","text":"The following options may be specified for this module: parameter type required default choices comments state str no executed executed cancelled action to carry out on the task executed - execute tasks cancelled - cancel tasks tasks list yes CVP taskIDs to act on wait int no 0 Time to wait for tasks to transition to 'Completed'","title":"Module-specific Options"},{"location":"docs/module_docs/cv_task.rst/#examples","text":": --- - name: Execute all tasks registered in cvp_configlets variable arista.cvp.cv_task: tasks: \"{{ cvp_configlets.data.tasks }}\" - name: Cancel a list of pending tasks arista.cvp.cv_task: tasks: \"{{ cvp_configlets.data.tasks }}\" state: cancelled # Execute all pending tasks and wait for completion for 60 seconds # In order to get a list of all pending tasks, execute cv_facts first - name: Update cvp facts arista.cvp.cv_facts: - name: Execute all pending tasks and wait for completion for 60 seconds arista.cvp.cv_task: port: '{{cvp_port}}' tasks: \"{{ tasks }}\" wait: 60","title":"Examples"},{"location":"docs/module_docs/cv_task.rst/#author","text":"EMEA AS Team (@aristanetworks)","title":"Author"},{"location":"docs/module_docs/cv_task.rst/#status","text":"This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Status"},{"location":"plugins/","text":"Collections Plugins Directory # arista.cvp collection provides a set of plugins to configure Arista EOS devices with a CloudVision Platform server. List of available modules # arista.cvp.cv_facts - Collect CVP facts from server like list of containers, devices, configlet and tasks. arista.cvp.cv_configlet : Manage configlet configured on CVP. arista.cvp.cv_container : Manage container topology and attach configlet and devices to containers. arista.cvp.cv_device : Manage devices configured on CVP arista.cvp.cv_task : Run tasks created on CVP.","title":"Collections Plugins Directory"},{"location":"plugins/#collections-plugins-directory","text":"arista.cvp collection provides a set of plugins to configure Arista EOS devices with a CloudVision Platform server.","title":"Collections Plugins Directory"},{"location":"plugins/#list-of-available-modules","text":"arista.cvp.cv_facts - Collect CVP facts from server like list of containers, devices, configlet and tasks. arista.cvp.cv_configlet : Manage configlet configured on CVP. arista.cvp.cv_container : Manage container topology and attach configlet and devices to containers. arista.cvp.cv_device : Manage devices configured on CVP arista.cvp.cv_task : Run tasks created on CVP.","title":"List of available modules"},{"location":"roles/dhcp_configuration/","text":"dhcp_configuration role # Ansible role to provision and configure Zero Touch Provisioning on a CloudVision server. Role will do the following: Install DHCP package Activate DHCPd service on CloudVision. Create /etc/dhcp/dhcpd.conf file with relevant information. Reload dhcpd service to apply changes. Requirements # No specific requirements to use this role. Tested Platforms # Below is a list of platforms where DHCPd configuration has been tested: Centos 7 / 8 Ubuntu 18.02 Arista Cloudvision 2019 and onward (for lab purpose) This role should work on any platform running ISC-DHCP server . If role is applied to Cloudvision server, DHCP configuration may be erased during upgrade process. Use it at your own risk in a production environment. Role Variables # dhcp_packages : [] < List of packages to install as part of DHCP service. (default is ['dhcp'])> dhcp_packages_state : < Flag to install or remove DHCP package. (default is present)> dhcp_config_dir : < Folder where dhcp config is saved. (default is /etc/dhcp/)> dhcp_config : < Configuration file for DHCP service. (default is {{ dhcp_config_dir }}/dhcpd.conf)> dhcp_service : < Name of the service running on the system for DHCP. (default is dhcpd)> ztp : default : < Section with default value for hosts configuration > registration : < * Default URL to get Script to register to CV or initial configuration > gateway : < Gateway to use by default if not set per device > nameservers : < List of default NS to use on a per host basis > general : < Section to define subnets parameters > subnets : - network : < * Subnet where DHCP will listen for request > netmask : < * Netmask of given subnet > gateway : < Gateway to configure for given subnet > nameservers : < List of name-servers to configure for given subnet > start : < First IP available in the pool > end : < Last IP available in the pool > lease_time : < Maximum lease time before device loose IP. Renewal is max/2 > clients : < List of clients on a mac-address basis > - name : < * Hostname to provide when device do a DHCP request > mac : < * Mac address of the host. Mac address value MUST be protected by either single or dual quotes > ip4 : < * IP Address of the host > registration : < Registration URL to use for the host. If not set, default value will be applied > gateway : < Gateway to use for the host. If not set, default value will be applied > nameservers : < List of NS to use for the host. If not set, default value will be applied > Variables with * are mandatory, others are optional and might be skipped if not needed in your setup. Dependencies # No dependency required for this role. Example Playbook # Below is a basic playbook running arista.cvp.dhcp_configuration role --- - name : Configure DHCP service on CloudVision hosts : dhcp_server collection : - arista.cvp vars : ztp : default : registration : 'http://10.255.0.1/ztp/bootstrap' gateway : 10.255.0.3 nameservers : - '10.255.0.3' general : subnets : - network : 10.255.0.0 netmask : 255.255.255.0 gateway : 10.255.0.3 nameservers : - '10.255.0.3' start : 10.255.0.200 end : 10.255.0.250 lease_time : 300 clients : - name : DC1-SPINE1 mac : '0c:1d:c0:1d:62:01' ip4 : 10.255.0.11 - name : DC1-SPINE2 mac : '0c:1d:c0:1d:62:02' ip4 : 10.255.0.12 - name : DC1-LEAF1A mac : '0c:1d:c0:1d:62:11' ip4 : 10.255.0.13 tasks : - name : 'Execute DHCP configuration role' import_role : name : arista.cvp.dhcp_configuration Inventory is configured like below: --- all : children : CVP : hosts : dhcp_server : ansible_host : 1.1.1.1 ansible_user : root ansible_password : password If you are not using root user, please also add ansible_become_password . By default, ansible_become_password is set to be equal to ansible_password SSH connection is managed by paramiko . License # Project is published under Apache 2.0 License","title":"DHCP Configuration"},{"location":"roles/dhcp_configuration/#dhcp_configuration-role","text":"Ansible role to provision and configure Zero Touch Provisioning on a CloudVision server. Role will do the following: Install DHCP package Activate DHCPd service on CloudVision. Create /etc/dhcp/dhcpd.conf file with relevant information. Reload dhcpd service to apply changes.","title":"dhcp_configuration role"},{"location":"roles/dhcp_configuration/#requirements","text":"No specific requirements to use this role.","title":"Requirements"},{"location":"roles/dhcp_configuration/#tested-platforms","text":"Below is a list of platforms where DHCPd configuration has been tested: Centos 7 / 8 Ubuntu 18.02 Arista Cloudvision 2019 and onward (for lab purpose) This role should work on any platform running ISC-DHCP server . If role is applied to Cloudvision server, DHCP configuration may be erased during upgrade process. Use it at your own risk in a production environment.","title":"Tested Platforms"},{"location":"roles/dhcp_configuration/#role-variables","text":"dhcp_packages : [] < List of packages to install as part of DHCP service. (default is ['dhcp'])> dhcp_packages_state : < Flag to install or remove DHCP package. (default is present)> dhcp_config_dir : < Folder where dhcp config is saved. (default is /etc/dhcp/)> dhcp_config : < Configuration file for DHCP service. (default is {{ dhcp_config_dir }}/dhcpd.conf)> dhcp_service : < Name of the service running on the system for DHCP. (default is dhcpd)> ztp : default : < Section with default value for hosts configuration > registration : < * Default URL to get Script to register to CV or initial configuration > gateway : < Gateway to use by default if not set per device > nameservers : < List of default NS to use on a per host basis > general : < Section to define subnets parameters > subnets : - network : < * Subnet where DHCP will listen for request > netmask : < * Netmask of given subnet > gateway : < Gateway to configure for given subnet > nameservers : < List of name-servers to configure for given subnet > start : < First IP available in the pool > end : < Last IP available in the pool > lease_time : < Maximum lease time before device loose IP. Renewal is max/2 > clients : < List of clients on a mac-address basis > - name : < * Hostname to provide when device do a DHCP request > mac : < * Mac address of the host. Mac address value MUST be protected by either single or dual quotes > ip4 : < * IP Address of the host > registration : < Registration URL to use for the host. If not set, default value will be applied > gateway : < Gateway to use for the host. If not set, default value will be applied > nameservers : < List of NS to use for the host. If not set, default value will be applied > Variables with * are mandatory, others are optional and might be skipped if not needed in your setup.","title":"Role Variables"},{"location":"roles/dhcp_configuration/#dependencies","text":"No dependency required for this role.","title":"Dependencies"},{"location":"roles/dhcp_configuration/#example-playbook","text":"Below is a basic playbook running arista.cvp.dhcp_configuration role --- - name : Configure DHCP service on CloudVision hosts : dhcp_server collection : - arista.cvp vars : ztp : default : registration : 'http://10.255.0.1/ztp/bootstrap' gateway : 10.255.0.3 nameservers : - '10.255.0.3' general : subnets : - network : 10.255.0.0 netmask : 255.255.255.0 gateway : 10.255.0.3 nameservers : - '10.255.0.3' start : 10.255.0.200 end : 10.255.0.250 lease_time : 300 clients : - name : DC1-SPINE1 mac : '0c:1d:c0:1d:62:01' ip4 : 10.255.0.11 - name : DC1-SPINE2 mac : '0c:1d:c0:1d:62:02' ip4 : 10.255.0.12 - name : DC1-LEAF1A mac : '0c:1d:c0:1d:62:11' ip4 : 10.255.0.13 tasks : - name : 'Execute DHCP configuration role' import_role : name : arista.cvp.dhcp_configuration Inventory is configured like below: --- all : children : CVP : hosts : dhcp_server : ansible_host : 1.1.1.1 ansible_user : root ansible_password : password If you are not using root user, please also add ansible_become_password . By default, ansible_become_password is set to be equal to ansible_password SSH connection is managed by paramiko .","title":"Example Playbook"},{"location":"roles/dhcp_configuration/#license","text":"Project is published under Apache 2.0 License","title":"License"}]}