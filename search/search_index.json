{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ansible Modules for Arista CloudVision Platform # About # Arista Networks supports Ansible for managing devices running the EOS operating system through CloudVision platform (CVP) . This roles includes a set of ansible modules that perform specific configuration tasks on CVP server. These tasks include: collecting facts, managing configlets, containers, build provisionning topology and running tasks. Requirements # Arista CloudVision: CloudVision 2018.2.5 or later Python: Python 3.6.8 or later Additional Python Libraries required: requests >= 2.22.0 treelib version 1.5.5 or later Supported Ansible Versions: ansible 2.9 or later Installation # pip install requests> = 2 .22.0 pip install treelib> = 1 .5.5 Ansible galaxy hosts all stable version of this collection. Installation from ansible-galaxy is the most convenient approach for consuming arista.cvp content $ ansible-galaxy collection install arista.cvp Process install dependency map Starting collection install process Installing 'arista.cvp:1.0.3' to '~/.ansible/collections/ansible_collections/arista/cvp' Modules overview # This repository provides content for Ansible\u2019s collection arista.cvp with following content: arista.cvp.cv_facts - Collect CVP facts from server like list of containers, devices, configlet and tasks. arista.cvp.cv_configlet - Manage configlet configured on CVP. arista.cvp.cv_container - Manage container topology and attach configlet and devices to containers. arista.cvp.cv_device - Manage devices configured on CVP arista.cvp.cv_task - Run tasks created on CVP. List of available roles: arista.cvp.dhcp_configuration - Configure DHCPD service on a Cloudvision server or any dhcpd service. This collection supports CVP version >= 2018.2.5 Example # Create containers on CloudVision # --- - name : Build Switch configuration hosts : DC1_FABRIC connection : local gather_facts : no vars : CVP_CONTAINERS : DC1_LEAF1 : parent_container : DC1_L3LEAFS DC1_FABRIC : parent_container : Tenant DC1_L3LEAFS : parent_container : DC1_FABRIC DC1_LEAF2 : parent_container : DC1_L3LEAFS DC1_SPINES : parent_container : DC1_FABRIC tasks : - name : 'Collecting facts from CVP {{inventory_hostname}}.' arista.cvp.cv_facts : register : CVP_FACTS - name : \"Building Container topology on {{inventory_hostname}}\" tags : [ provision ] arista.cvp.cv_container : topology : '{{CVP_CONTAINERS}}' cvp_facts : '{{CVP_FACTS.ansible_facts}}' Create Configlets on CloudVision # --- - name : Build Switch configuration hosts : DC1_FABRIC connection : local gather_facts : no vars : CVP_CONFIGLETS : ANSIBLE_TESTING_CONTAINER : \"alias a{{ 999 | random }} show version\" ANSIBLE_TESTING_VEOS : \"alias a{{ 999 | random }} show version\" tasks : - name : 'Collecting facts from CVP {{inventory_hostname}}.' arista.cvp.cv_facts : register : CVP_FACTS - name : 'Create configlets on CVP {{inventory_hostname}}.' arista.cvp.cv_configlet : cvp_facts : \"{{CVP_FACTS.ansible_facts}}\" configlets : \"{{CVP_CONFIGLETS}}\" configlet_filter : [ \"_TESTING_\" ] Configure devices on CloudVision # --- - name : Build Switch configuration hosts : DC1_FABRIC connection : local gather_facts : no vars : CVP_DEVICES : DC1-SPINE1 : name : DC1-SPINE1 parent_container : DC1_SPINES configlets : - AVD_DC1-SPINE1 imageBundle : [] DC1-SPINE2 : name : DC1-SPINE2 parent_container : DC1_SPINES configlets : - AVD_DC1-SPINE2 imageBundle : [] tasks : - name : 'Collecting facts from CVP {{inventory_hostname}}.' arista.cvp.cv_facts : register : CVP_FACTS - name : \"Configure devices on {{inventory_hostname}}\" arista.cvp.cv_device : devices : \"{{CVP_DEVICES}}\" cvp_facts : '{{CVP_FACTS.ansible_facts}}' device_filter : [ 'DC1' ] state : present More documentation on github repository License # Project is published under Apache License . Ask a question # Support for this arista.cvp collection is provided by the community directly in this repository. Easiest way to get support is to open an issue . Contributing # Contributing pull requests are gladly welcomed for this repository. If you are planning a big change, please start a discussion first to make sure we\u2019ll be able to merge it. You can also open an issue to report any problem or to submit enhancement. A more complete guide for contribution is available in the repository","title":"Ansible Modules for Arista CloudVision Platform"},{"location":"#ansible-modules-for-arista-cloudvision-platform","text":"","title":"Ansible Modules for Arista CloudVision Platform"},{"location":"#about","text":"Arista Networks supports Ansible for managing devices running the EOS operating system through CloudVision platform (CVP) . This roles includes a set of ansible modules that perform specific configuration tasks on CVP server. These tasks include: collecting facts, managing configlets, containers, build provisionning topology and running tasks.","title":"About"},{"location":"#requirements","text":"Arista CloudVision: CloudVision 2018.2.5 or later Python: Python 3.6.8 or later Additional Python Libraries required: requests >= 2.22.0 treelib version 1.5.5 or later Supported Ansible Versions: ansible 2.9 or later","title":"Requirements"},{"location":"#installation","text":"pip install requests> = 2 .22.0 pip install treelib> = 1 .5.5 Ansible galaxy hosts all stable version of this collection. Installation from ansible-galaxy is the most convenient approach for consuming arista.cvp content $ ansible-galaxy collection install arista.cvp Process install dependency map Starting collection install process Installing 'arista.cvp:1.0.3' to '~/.ansible/collections/ansible_collections/arista/cvp'","title":"Installation"},{"location":"#modules-overview","text":"This repository provides content for Ansible\u2019s collection arista.cvp with following content: arista.cvp.cv_facts - Collect CVP facts from server like list of containers, devices, configlet and tasks. arista.cvp.cv_configlet - Manage configlet configured on CVP. arista.cvp.cv_container - Manage container topology and attach configlet and devices to containers. arista.cvp.cv_device - Manage devices configured on CVP arista.cvp.cv_task - Run tasks created on CVP. List of available roles: arista.cvp.dhcp_configuration - Configure DHCPD service on a Cloudvision server or any dhcpd service. This collection supports CVP version >= 2018.2.5","title":"Modules overview"},{"location":"#example","text":"","title":"Example"},{"location":"#create-containers-on-cloudvision","text":"--- - name : Build Switch configuration hosts : DC1_FABRIC connection : local gather_facts : no vars : CVP_CONTAINERS : DC1_LEAF1 : parent_container : DC1_L3LEAFS DC1_FABRIC : parent_container : Tenant DC1_L3LEAFS : parent_container : DC1_FABRIC DC1_LEAF2 : parent_container : DC1_L3LEAFS DC1_SPINES : parent_container : DC1_FABRIC tasks : - name : 'Collecting facts from CVP {{inventory_hostname}}.' arista.cvp.cv_facts : register : CVP_FACTS - name : \"Building Container topology on {{inventory_hostname}}\" tags : [ provision ] arista.cvp.cv_container : topology : '{{CVP_CONTAINERS}}' cvp_facts : '{{CVP_FACTS.ansible_facts}}'","title":"Create containers on CloudVision"},{"location":"#create-configlets-on-cloudvision","text":"--- - name : Build Switch configuration hosts : DC1_FABRIC connection : local gather_facts : no vars : CVP_CONFIGLETS : ANSIBLE_TESTING_CONTAINER : \"alias a{{ 999 | random }} show version\" ANSIBLE_TESTING_VEOS : \"alias a{{ 999 | random }} show version\" tasks : - name : 'Collecting facts from CVP {{inventory_hostname}}.' arista.cvp.cv_facts : register : CVP_FACTS - name : 'Create configlets on CVP {{inventory_hostname}}.' arista.cvp.cv_configlet : cvp_facts : \"{{CVP_FACTS.ansible_facts}}\" configlets : \"{{CVP_CONFIGLETS}}\" configlet_filter : [ \"_TESTING_\" ]","title":"Create Configlets on CloudVision"},{"location":"#configure-devices-on-cloudvision","text":"--- - name : Build Switch configuration hosts : DC1_FABRIC connection : local gather_facts : no vars : CVP_DEVICES : DC1-SPINE1 : name : DC1-SPINE1 parent_container : DC1_SPINES configlets : - AVD_DC1-SPINE1 imageBundle : [] DC1-SPINE2 : name : DC1-SPINE2 parent_container : DC1_SPINES configlets : - AVD_DC1-SPINE2 imageBundle : [] tasks : - name : 'Collecting facts from CVP {{inventory_hostname}}.' arista.cvp.cv_facts : register : CVP_FACTS - name : \"Configure devices on {{inventory_hostname}}\" arista.cvp.cv_device : devices : \"{{CVP_DEVICES}}\" cvp_facts : '{{CVP_FACTS.ansible_facts}}' device_filter : [ 'DC1' ] state : present More documentation on github repository","title":"Configure devices on CloudVision"},{"location":"#license","text":"Project is published under Apache License .","title":"License"},{"location":"#ask-a-question","text":"Support for this arista.cvp collection is provided by the community directly in this repository. Easiest way to get support is to open an issue .","title":"Ask a question"},{"location":"#contributing","text":"Contributing pull requests are gladly welcomed for this repository. If you are planning a big change, please start a discussion first to make sure we\u2019ll be able to merge it. You can also open an issue to report any problem or to submit enhancement. A more complete guide for contribution is available in the repository","title":"Contributing"},{"location":"contributing/","text":"Contribute to Arista ansible-cvp collection # Contribute to Arista ansible-cvp collection Reporting Bugs Feature Requests Using the issue tracker Branches Current active branches Branch namespaces Branches for Bug Fixes only Pull requests Please take a moment to review this document in order to make the contribution process easy and effective for everyone involved. Following these guidelines helps to communicate that you respect the time of the developers managing and developing this open source project. In return, they should reciprocate that respect in addressing your issue or assessing patches and features. Reporting Bugs # First, ensure that you\u2019ve installed the latest stable version of ansible-cvp . If you\u2019re running an older version, it\u2019s possible that the bug has already been fixed. Next, check the GitHub issues list to see if the bug you\u2019ve found has already been reported. If you think you may be experiencing a reported issue that hasn\u2019t already been resolved, please click \u201cadd a reaction\u201d in the top right corner of the issue and add a thumbs up (+1). You might also want to add a comment describing how it\u2019s affecting your installation. This will allow us to prioritize bugs based on how many users are affected. If you haven\u2019t found an existing issue that describes your suspected bug, Do not file an issue until you have received confirmation that it is in fact a bug. Invalid issues are very distracting and slow the pace at which ansible-cvp is developed. When submitting an issue, please be as descriptive as possible. Be sure to include: The environment in which ansible-cvp is running The exact steps that can be taken to reproduce the issue (if applicable) Any error messages generated Screenshots (if applicable) Please avoid prepending any sort of tag (e.g. \u201c[Bug]\u201d) to the issue title. The issue will be reviewed by a moderator after submission and the appropriate labels will be applied for categorization. Keep in mind that we prioritize bugs based on their severity and how much work is required to resolve them. It may take some time for someone to address your issue. Feature Requests # First, check the GitHub issues list to see if the feature you\u2019re requesting is already listed. (Be sure to search closed issues as well, since some feature requests have been rejected.) If the feature you\u2019d like to see has already been requested and is open, click \u201cadd a reaction\u201d in the top right corner of the issue and add a thumbs up (+1). This ensures that the issue has a better chance of receiving attention. Also feel free to add a comment with any additional justification for the feature. (However, note that comments with no substance other than a \u201c+1\u201d will be deleted. Please use GitHub\u2019s reactions feature to indicate your support.) Before filing a new feature request, consider raising your idea on the mailing list first. Feedback you receive there will help validate and shape the proposed feature before filing a formal issue. Good feature requests are very narrowly defined. Be sure to thoroughly describe the functionality and data model(s) being proposed. The more effort you put into writing a feature request, the better its chance is of being implemented. Overly broad feature requests will be closed. When submitting a feature request on GitHub, be sure to include the following: A detailed description of the proposed functionality A use case for the feature; who would use it and what value it would add to ansible-cvp A rough description of changes necessary Any third-party libraries or other resources which would be involved Please avoid prepending any sort of tag (e.g. \u201c[Feature]\u201d) to the issue title. The issue will be reviewed by a moderator after submission and the appropriate labels will be applied for categorization. Using the issue tracker # The issue tracker is the preferred channel for bug reports , features requests and submitting pull requests , but please respect the following restrictions: Please do not use the issue tracker for personal support requests. Please do not derail or troll issues. Keep the discussion on topic and respect the opinions of others. Branches # Current active branches # Current development branch: releases/v1.1.x Stable branch: master Branch namespaces # Branch namespace for issues: issues/<IssueID>-<issue-name-shorten> Branch namespace for new features: features/<IssueID>-<issue-name-shorten> Branch namespace for releases & development: releases/<release_id> Branches for Bug Fixes only # Branch releases/v1.0.x : Bug Fixes only (cherry-picking or specific PR) Pull requests # Be sure to open an issue before starting work on a pull request, and discuss your idea with the ansible-cvp maintainers before beginning work. This will help prevent wasting time on something that might we might not be able to implement. When suggesting a new feature, also make sure it won\u2019t conflict with any work that\u2019s already in progress. Any pull request which does not relate to an accepted issue will be closed. All major new functionality must include relevant tests where applicable. When submitting a pull request, please be sure to work off of the releases/grant-v1.x branch, rather than master . The releases/grant-v1.x branch is used for ongoing development, while master is used for tagging new stable releases. All code submissions should meet the following criteria (CI will enforce these checks): Python syntax is valid All tests pass when run with make sanity PEP 8 compliance is enforced, with the exception that lines may be greater than 80 characters in length Adhering to the following this process is the best way to get your work merged: Fork the repo, clone your fork, and configure the remotes: # Clone your fork of the repo into the current directory git clone https://github.com/<your-username>/ansible-cvp # Navigate to the newly cloned directory cd ansible-cvp # Assign the original repo to a remote called \"upstream\" git remote add upstream https://github.com/aristanetworks/ansible-cvp.git If you cloned a while ago, get the latest changes from upstream: git checkout <dev-branch> git pull upstream <dev-branch> Please refer to branches section to get current branch to use as <dev-branch> Create a new topic branch (off the main project development branch) to contain your feature, change, or fix: git checkout -b <topic-branch-name> Commit your changes in logical chunks. Please adhere to these git commit message guidelines or your code is unlikely be merged into the main project. Use Git\u2019s interactive rebase feature to tidy up your commits before making them public. Locally merge (or rebase) the upstream development branch into your topic branch: git pull [ --rebase ] upstream <dev-branch> Push your topic branch up to your fork: git push origin <topic-branch-name> Open a Pull Request with a clear title and description.","title":"Contribution Guide"},{"location":"contributing/#contribute-to-arista-ansible-cvp-collection","text":"Contribute to Arista ansible-cvp collection Reporting Bugs Feature Requests Using the issue tracker Branches Current active branches Branch namespaces Branches for Bug Fixes only Pull requests Please take a moment to review this document in order to make the contribution process easy and effective for everyone involved. Following these guidelines helps to communicate that you respect the time of the developers managing and developing this open source project. In return, they should reciprocate that respect in addressing your issue or assessing patches and features.","title":"Contribute to Arista ansible-cvp collection"},{"location":"contributing/#reporting-bugs","text":"First, ensure that you\u2019ve installed the latest stable version of ansible-cvp . If you\u2019re running an older version, it\u2019s possible that the bug has already been fixed. Next, check the GitHub issues list to see if the bug you\u2019ve found has already been reported. If you think you may be experiencing a reported issue that hasn\u2019t already been resolved, please click \u201cadd a reaction\u201d in the top right corner of the issue and add a thumbs up (+1). You might also want to add a comment describing how it\u2019s affecting your installation. This will allow us to prioritize bugs based on how many users are affected. If you haven\u2019t found an existing issue that describes your suspected bug, Do not file an issue until you have received confirmation that it is in fact a bug. Invalid issues are very distracting and slow the pace at which ansible-cvp is developed. When submitting an issue, please be as descriptive as possible. Be sure to include: The environment in which ansible-cvp is running The exact steps that can be taken to reproduce the issue (if applicable) Any error messages generated Screenshots (if applicable) Please avoid prepending any sort of tag (e.g. \u201c[Bug]\u201d) to the issue title. The issue will be reviewed by a moderator after submission and the appropriate labels will be applied for categorization. Keep in mind that we prioritize bugs based on their severity and how much work is required to resolve them. It may take some time for someone to address your issue.","title":"Reporting Bugs"},{"location":"contributing/#feature-requests","text":"First, check the GitHub issues list to see if the feature you\u2019re requesting is already listed. (Be sure to search closed issues as well, since some feature requests have been rejected.) If the feature you\u2019d like to see has already been requested and is open, click \u201cadd a reaction\u201d in the top right corner of the issue and add a thumbs up (+1). This ensures that the issue has a better chance of receiving attention. Also feel free to add a comment with any additional justification for the feature. (However, note that comments with no substance other than a \u201c+1\u201d will be deleted. Please use GitHub\u2019s reactions feature to indicate your support.) Before filing a new feature request, consider raising your idea on the mailing list first. Feedback you receive there will help validate and shape the proposed feature before filing a formal issue. Good feature requests are very narrowly defined. Be sure to thoroughly describe the functionality and data model(s) being proposed. The more effort you put into writing a feature request, the better its chance is of being implemented. Overly broad feature requests will be closed. When submitting a feature request on GitHub, be sure to include the following: A detailed description of the proposed functionality A use case for the feature; who would use it and what value it would add to ansible-cvp A rough description of changes necessary Any third-party libraries or other resources which would be involved Please avoid prepending any sort of tag (e.g. \u201c[Feature]\u201d) to the issue title. The issue will be reviewed by a moderator after submission and the appropriate labels will be applied for categorization.","title":"Feature Requests"},{"location":"contributing/#using-the-issue-tracker","text":"The issue tracker is the preferred channel for bug reports , features requests and submitting pull requests , but please respect the following restrictions: Please do not use the issue tracker for personal support requests. Please do not derail or troll issues. Keep the discussion on topic and respect the opinions of others.","title":"Using the issue tracker"},{"location":"contributing/#branches","text":"","title":"Branches"},{"location":"contributing/#current-active-branches","text":"Current development branch: releases/v1.1.x Stable branch: master","title":"Current active branches"},{"location":"contributing/#branch-namespaces","text":"Branch namespace for issues: issues/<IssueID>-<issue-name-shorten> Branch namespace for new features: features/<IssueID>-<issue-name-shorten> Branch namespace for releases & development: releases/<release_id>","title":"Branch namespaces"},{"location":"contributing/#branches-for-bug-fixes-only","text":"Branch releases/v1.0.x : Bug Fixes only (cherry-picking or specific PR)","title":"Branches for Bug Fixes only"},{"location":"contributing/#pull-requests","text":"Be sure to open an issue before starting work on a pull request, and discuss your idea with the ansible-cvp maintainers before beginning work. This will help prevent wasting time on something that might we might not be able to implement. When suggesting a new feature, also make sure it won\u2019t conflict with any work that\u2019s already in progress. Any pull request which does not relate to an accepted issue will be closed. All major new functionality must include relevant tests where applicable. When submitting a pull request, please be sure to work off of the releases/grant-v1.x branch, rather than master . The releases/grant-v1.x branch is used for ongoing development, while master is used for tagging new stable releases. All code submissions should meet the following criteria (CI will enforce these checks): Python syntax is valid All tests pass when run with make sanity PEP 8 compliance is enforced, with the exception that lines may be greater than 80 characters in length Adhering to the following this process is the best way to get your work merged: Fork the repo, clone your fork, and configure the remotes: # Clone your fork of the repo into the current directory git clone https://github.com/<your-username>/ansible-cvp # Navigate to the newly cloned directory cd ansible-cvp # Assign the original repo to a remote called \"upstream\" git remote add upstream https://github.com/aristanetworks/ansible-cvp.git If you cloned a while ago, get the latest changes from upstream: git checkout <dev-branch> git pull upstream <dev-branch> Please refer to branches section to get current branch to use as <dev-branch> Create a new topic branch (off the main project development branch) to contain your feature, change, or fix: git checkout -b <topic-branch-name> Commit your changes in logical chunks. Please adhere to these git commit message guidelines or your code is unlikely be merged into the main project. Use Git\u2019s interactive rebase feature to tidy up your commits before making them public. Locally merge (or rebase) the upstream development branch into your topic branch: git pull [ --rebase ] upstream <dev-branch> Push your topic branch up to your fork: git push origin <topic-branch-name> Open a Pull Request with a clear title and description.","title":"Pull requests"},{"location":"docs/getting-started/","text":"Getting Started # This example outlines how to use arista.cvp to create a containers topology on Arista CloudVision. A complete end to end demo using Arista Validated Design collection and CloudVision modules is available as an example. Below is a very basic example to build a container topology on a CloudVision platform assuming you have 3 veos named veos0{1,3} and a configlet named alias --- - name : Playbook to demonstrate cv_container module. hosts : cvp connection : local gather_facts : no collections : - arista.cvp vars : containers_provision : Fabric : parent_container : Tenant Spines : parent_container : Fabric Leaves : parent_container : Fabric configlets : - alias devices : - veos03 MLAG01 : parent_container : Leaves devices : - veos01 - veos02 tasks : - name : \"Gather CVP facts from {{inventory_hostname}}\" cv_facts : register : cvp_facts - name : \"Build Container topology on {{inventory_hostname}}\" cv_container : topology : '{{containers_provision}}' cvp_facts : '{{cvp_facts.ansible_facts}}' As modules of this collection are based on HTTPAPI connection plugin , authentication elements shall be declared using this plugin mechanism and are automatically shared with arista.cvp.cv_* modules. [development] cvp_foster ansible_host = 10.90.224.122 ansible_httpapi_host=10.90.224.122 [development:vars] ansible_connection = httpapi ansible_httpapi_use_ssl = True ansible_httpapi_validate_certs = False ansible_user = cvpadmin ansible_password = ansible ansible_network_os = eos ansible_httpapi_port = 443 As modules of this collection are based on HTTPAPI connection plugin , authentication elements shall be declared using this plugin mechanism and are automatically shared with arista.cvp.cv_* modules.","title":"Getting Started"},{"location":"docs/getting-started/#getting-started","text":"This example outlines how to use arista.cvp to create a containers topology on Arista CloudVision. A complete end to end demo using Arista Validated Design collection and CloudVision modules is available as an example. Below is a very basic example to build a container topology on a CloudVision platform assuming you have 3 veos named veos0{1,3} and a configlet named alias --- - name : Playbook to demonstrate cv_container module. hosts : cvp connection : local gather_facts : no collections : - arista.cvp vars : containers_provision : Fabric : parent_container : Tenant Spines : parent_container : Fabric Leaves : parent_container : Fabric configlets : - alias devices : - veos03 MLAG01 : parent_container : Leaves devices : - veos01 - veos02 tasks : - name : \"Gather CVP facts from {{inventory_hostname}}\" cv_facts : register : cvp_facts - name : \"Build Container topology on {{inventory_hostname}}\" cv_container : topology : '{{containers_provision}}' cvp_facts : '{{cvp_facts.ansible_facts}}' As modules of this collection are based on HTTPAPI connection plugin , authentication elements shall be declared using this plugin mechanism and are automatically shared with arista.cvp.cv_* modules. [development] cvp_foster ansible_host = 10.90.224.122 ansible_httpapi_host=10.90.224.122 [development:vars] ansible_connection = httpapi ansible_httpapi_use_ssl = True ansible_httpapi_validate_certs = False ansible_user = cvpadmin ansible_password = ansible ansible_network_os = eos ansible_httpapi_port = 443 As modules of this collection are based on HTTPAPI connection plugin , authentication elements shall be declared using this plugin mechanism and are automatically shared with arista.cvp.cv_* modules.","title":"Getting Started"},{"location":"docs/installation/requirements/","text":"","title":"Requirements"},{"location":"docs/installation/setup-docker/","text":"Docker & Development environment # Two methods can be used get Ansible up and running quickly with all the requirements to leverage ansible-avd. A Python Virtual Environment or Docker container. The best way to use the development files, is to copy them to the root directory where you have your repositories cloned. For example, see the file/folder structure below. \u251c\u2500\u2500 git_projects \u2502 \u251c\u2500\u2500 ansible-avd \u2502 \u251c\u2500\u2500 ansible-cvp \u2502 \u251c\u2500\u2500 ansible-eos \u2502 \u251c\u2500\u2500 eve-ng-lab \u2502 \u251c\u2500\u2500 netdevops-examples \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u251c\u2500\u2500 Makefile \u2502 \u251c\u2500\u2500 requirements-dev.txt \u2502 \u251c\u2500\u2500 requirements.txt Python Virtual Environment # Install Python3 Virtual Environment # # install virtualenv via pip3 $ sudo pip3 install virtualenv # Configure Python virtual environment $ virtualenv -p python3 .venv $ source .venv/bin/activate # Install Python requirements $ pip install -r requirements.txt Docker Container for Ansible Testing and Development # The docker container approach for development can be used to ensure that everybody is using the same development environment while still being flexible enough to use the repo you are making changes in. You can inspect the Dockerfile to see what packages have been installed. The container will mount the current working directory, so you can work with your local files. The ansible version is passed in with the docker build command using ANSIBLE variable. If the ANSIBLE variable is not used the Dockerfile will by default set the ansible version to 2.9.2 Before you can use a container, you must install Docker CE on your workstation: https://www.docker.com/products/docker-desktop Build Docker Container # In addition to the Dockerfile , a Makefile is provided to help provision the container a single step. A user can pass the ansible version number to make and alter the default ansible-version number. This allows a user to setup multiple containers running differing versions of ansible. make build # Use default version of Ansible make build ANSIBLE_VERSION = 2 .9.5 # Explicitly set Ansible version to 2.9.5 docker images REPOSITORY TAG IMAGE ID CREATED SIZE ansible_avd 2 .9.6 5291937a2214 33 minutes ago 795MB ansible_avd 2 .9.5 27f648c4c249 46 hours ago 912MB Run Docker Container # make run # Use default version of Ansible make run ANSIBLE_VERSION = 2 .9.5 # Explicitly set Ansible version to 2.9.5 docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES e682058d7dae ansible_avd:2.9.5 \"/bin/sh\" 6 seconds ago Up 5 seconds ansible_avd_2.9.5 540a8e778907 ansible_avd:2.9.6 \"/bin/sh\" 38 seconds ago Up 37 seconds ansible_avd_2.9.6 Stop Docker Container # Another make target (clean) has been created to stop and remove the container once the user is finished with it. make clean # Clean default version of Ansible make clean ANSIBLE_VERSION = 2 .9.5 # Explicitly clean Ansible version to 2.9.5 docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES Getting started Script # mkdir git_projects cd git_projects git clone https://github.com/aristanetworks/ansible-avd.git git clone https://github.com/aristanetworks/ansible-cvp.git git clone https://github.com/aristanetworks/netdevops-examples.git cp ansible-avd/development/* ./ make build make run","title":"Docker & Development"},{"location":"docs/installation/setup-docker/#docker-development-environment","text":"Two methods can be used get Ansible up and running quickly with all the requirements to leverage ansible-avd. A Python Virtual Environment or Docker container. The best way to use the development files, is to copy them to the root directory where you have your repositories cloned. For example, see the file/folder structure below. \u251c\u2500\u2500 git_projects \u2502 \u251c\u2500\u2500 ansible-avd \u2502 \u251c\u2500\u2500 ansible-cvp \u2502 \u251c\u2500\u2500 ansible-eos \u2502 \u251c\u2500\u2500 eve-ng-lab \u2502 \u251c\u2500\u2500 netdevops-examples \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u251c\u2500\u2500 Makefile \u2502 \u251c\u2500\u2500 requirements-dev.txt \u2502 \u251c\u2500\u2500 requirements.txt","title":"Docker &amp; Development environment"},{"location":"docs/installation/setup-docker/#python-virtual-environment","text":"","title":"Python Virtual Environment"},{"location":"docs/installation/setup-docker/#install-python3-virtual-environment","text":"# install virtualenv via pip3 $ sudo pip3 install virtualenv # Configure Python virtual environment $ virtualenv -p python3 .venv $ source .venv/bin/activate # Install Python requirements $ pip install -r requirements.txt","title":"Install Python3 Virtual Environment"},{"location":"docs/installation/setup-docker/#docker-container-for-ansible-testing-and-development","text":"The docker container approach for development can be used to ensure that everybody is using the same development environment while still being flexible enough to use the repo you are making changes in. You can inspect the Dockerfile to see what packages have been installed. The container will mount the current working directory, so you can work with your local files. The ansible version is passed in with the docker build command using ANSIBLE variable. If the ANSIBLE variable is not used the Dockerfile will by default set the ansible version to 2.9.2 Before you can use a container, you must install Docker CE on your workstation: https://www.docker.com/products/docker-desktop","title":"Docker Container for Ansible Testing and Development"},{"location":"docs/installation/setup-docker/#build-docker-container","text":"In addition to the Dockerfile , a Makefile is provided to help provision the container a single step. A user can pass the ansible version number to make and alter the default ansible-version number. This allows a user to setup multiple containers running differing versions of ansible. make build # Use default version of Ansible make build ANSIBLE_VERSION = 2 .9.5 # Explicitly set Ansible version to 2.9.5 docker images REPOSITORY TAG IMAGE ID CREATED SIZE ansible_avd 2 .9.6 5291937a2214 33 minutes ago 795MB ansible_avd 2 .9.5 27f648c4c249 46 hours ago 912MB","title":"Build Docker Container"},{"location":"docs/installation/setup-docker/#run-docker-container","text":"make run # Use default version of Ansible make run ANSIBLE_VERSION = 2 .9.5 # Explicitly set Ansible version to 2.9.5 docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES e682058d7dae ansible_avd:2.9.5 \"/bin/sh\" 6 seconds ago Up 5 seconds ansible_avd_2.9.5 540a8e778907 ansible_avd:2.9.6 \"/bin/sh\" 38 seconds ago Up 37 seconds ansible_avd_2.9.6","title":"Run Docker Container"},{"location":"docs/installation/setup-docker/#stop-docker-container","text":"Another make target (clean) has been created to stop and remove the container once the user is finished with it. make clean # Clean default version of Ansible make clean ANSIBLE_VERSION = 2 .9.5 # Explicitly clean Ansible version to 2.9.5 docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES","title":"Stop Docker Container"},{"location":"docs/installation/setup-docker/#getting-started-script","text":"mkdir git_projects cd git_projects git clone https://github.com/aristanetworks/ansible-avd.git git clone https://github.com/aristanetworks/ansible-cvp.git git clone https://github.com/aristanetworks/netdevops-examples.git cp ansible-avd/development/* ./ make build make run","title":"Getting started Script"},{"location":"docs/installation/setup-galaxy/","text":"Collection installation via ansible-galaxy # Install from Ansible Galaxy # arista.cvp collection is available on Ansible Galaxy server and can be automatically installaded on your system. Latest version # $ ansible-galaxy collection install arista.cvp Install specific version # $ ansible-galaxy collection install arista.cvp: == 1 .0.2 Install in specific directory # If you want to install collection in a specific directory part of your project, you can call ansible-galaxy and update your ansible.cfg # Install collection under ${PWD/collections/} $ ansible-galaxy collection install arista.cvp -p collections/ # Update ansible.cfg file $ vim ansible.cfg collections_paths = ${ PWD } /collections:~/.ansible/collections:/usr/share/ansible/collections","title":"Installation using ansible-galaxy"},{"location":"docs/installation/setup-galaxy/#collection-installation-via-ansible-galaxy","text":"","title":"Collection installation via ansible-galaxy"},{"location":"docs/installation/setup-galaxy/#install-from-ansible-galaxy","text":"arista.cvp collection is available on Ansible Galaxy server and can be automatically installaded on your system.","title":"Install from Ansible Galaxy"},{"location":"docs/installation/setup-galaxy/#latest-version","text":"$ ansible-galaxy collection install arista.cvp","title":"Latest version"},{"location":"docs/installation/setup-galaxy/#install-specific-version","text":"$ ansible-galaxy collection install arista.cvp: == 1 .0.2","title":"Install specific version"},{"location":"docs/installation/setup-galaxy/#install-in-specific-directory","text":"If you want to install collection in a specific directory part of your project, you can call ansible-galaxy and update your ansible.cfg # Install collection under ${PWD/collections/} $ ansible-galaxy collection install arista.cvp -p collections/ # Update ansible.cfg file $ vim ansible.cfg collections_paths = ${ PWD } /collections:~/.ansible/collections:/usr/share/ansible/collections","title":"Install in specific directory"},{"location":"docs/installation/setup-git/","text":"Installation using GIT # Setup using Git to install collection # You can git clone this repository and use examples folder for testing. This folder contains a set of pre-configured playbook and ansible configuration: Clone repository # $ git clone https://github.com/aristanetworks/ansible-cvp.git $ cd ansible-cvp Build and install collection # $ ansible-galaxy collection build --force ansible_collections/arista/cvp $ ansible-galaxy collection install arista-cvp-<VERSION>.tar.gz Setup using Git for local testing. # Clone repository # # Clone repository $ git clone https://github.com/aristanetworks/ansible-cvp.git # Move to git folder cd ansible-cvp 2. Install python virtual-environment # # Install virtualenv if not part of your system $ python -m pip install virtualenv 3. Create virtual environment # # Create a virtual env named .venv $ virtualenv --no-site-packages -p $( which python2.7 ) .venv # Activate virtualenv $ source .venv/bin/activate 4. Install collection requirements # # Install repsoitory requirements $ pip install -r requirements.txt 5. (Optional) Update your ansible.cfg # Only if you want to use your own playbooks outside of __ examples/ __folder of the repository. # Get your current location $ pwd /path/to/ansible/cvp/collection_repository # Update your ansible.cfg $ vim ansible.cfg collections_paths = /path/to/ansible/cvp/collection_repository","title":"Installation using git"},{"location":"docs/installation/setup-git/#installation-using-git","text":"","title":"Installation using GIT"},{"location":"docs/installation/setup-git/#setup-using-git-to-install-collection","text":"You can git clone this repository and use examples folder for testing. This folder contains a set of pre-configured playbook and ansible configuration:","title":"Setup using Git to install collection"},{"location":"docs/installation/setup-git/#clone-repository","text":"$ git clone https://github.com/aristanetworks/ansible-cvp.git $ cd ansible-cvp","title":"Clone repository"},{"location":"docs/installation/setup-git/#build-and-install-collection","text":"$ ansible-galaxy collection build --force ansible_collections/arista/cvp $ ansible-galaxy collection install arista-cvp-<VERSION>.tar.gz","title":"Build and install collection"},{"location":"docs/installation/setup-git/#setup-using-git-for-local-testing","text":"","title":"Setup using Git for local testing."},{"location":"docs/installation/setup-git/#clone-repository_1","text":"# Clone repository $ git clone https://github.com/aristanetworks/ansible-cvp.git # Move to git folder cd ansible-cvp","title":"Clone repository"},{"location":"docs/installation/setup-git/#2-install-python-virtual-environment","text":"# Install virtualenv if not part of your system $ python -m pip install virtualenv","title":"2. Install python virtual-environment"},{"location":"docs/installation/setup-git/#3-create-virtual-environment","text":"# Create a virtual env named .venv $ virtualenv --no-site-packages -p $( which python2.7 ) .venv # Activate virtualenv $ source .venv/bin/activate","title":"3. Create virtual environment"},{"location":"docs/installation/setup-git/#4-install-collection-requirements","text":"# Install repsoitory requirements $ pip install -r requirements.txt","title":"4. Install collection requirements"},{"location":"docs/installation/setup-git/#5-optional-update-your-ansiblecfg","text":"Only if you want to use your own playbooks outside of __ examples/ __folder of the repository. # Get your current location $ pwd /path/to/ansible/cvp/collection_repository # Update your ansible.cfg $ vim ansible.cfg collections_paths = /path/to/ansible/cvp/collection_repository","title":"5. (Optional) Update your ansible.cfg"},{"location":"docs/modules/cv_configlet.rst/","text":"cv_configlet # Create, Delete, or Update CloudVision Portal Configlets. Module added in version 2.9 Synopsis # CloudVison Portal Configlet compares the list of configlets and config in configlets against cvp-facts then adds, deletes, or updates them as appropriate. If a configlet is in cvp_facts but not in configlets it will be deleted. If a configlet is in configlets but not in cvp_facts it will be created. If a configlet is in both configlets and cvp_facts it configuration will be compared and updated with the version in configlets if the two are different. Module-specific Options # The following options may be specified for this module: parameter type required default choices comments configlet_filter list no ['none'] Filter to apply intended mode on a set of configlet. If not used, then module only uses ADD mode. configlet_filter list configlets that can be modified or deleted based on configlets entries. configlets dict yes List of configlets to managed on CVP server. cvp_facts dict yes Facts extracted from CVP servers using cv_facts module state str no present present absent If absent, configlets will be removed from CVP if they are not bound to either a container or a device. If present, configlets will be created or updated. Examples: # --- - name: Test cv_configlet_v2 hosts: cvp connection: local gather_facts: no vars: configlet_list: Test_Configlet: \"! This is a Very First Testing Configlet\\n!\" Test_DYNAMIC_Configlet: \" {{ lookup ( 'file' , 'templates/configlet_' + inventory_hostname + '.txt' ) }} \" tasks: - name: 'Collecting facts from CVP {{ inventory_hostname }} .' tags: - always cv_facts: register: cvp_facts - name: 'Create configlets on CVP {{ inventory_hostname }} .' tags: - provision cv_configlet: cvp_facts: \" {{ cvp_facts.ansible_facts }} \" configlets: \" {{ configlet_list }} \" configlet_filter: [\"New\", \"Test\",\"base-chk\",\"base-firewall\"] register: cvp_configlet Author # EMEA AS Team (@aristanetworks) Status # This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Module cv_configlet"},{"location":"docs/modules/cv_configlet.rst/#cv_configlet","text":"Create, Delete, or Update CloudVision Portal Configlets. Module added in version 2.9","title":"cv_configlet"},{"location":"docs/modules/cv_configlet.rst/#synopsis","text":"CloudVison Portal Configlet compares the list of configlets and config in configlets against cvp-facts then adds, deletes, or updates them as appropriate. If a configlet is in cvp_facts but not in configlets it will be deleted. If a configlet is in configlets but not in cvp_facts it will be created. If a configlet is in both configlets and cvp_facts it configuration will be compared and updated with the version in configlets if the two are different.","title":"Synopsis"},{"location":"docs/modules/cv_configlet.rst/#module-specific-options","text":"The following options may be specified for this module: parameter type required default choices comments configlet_filter list no ['none'] Filter to apply intended mode on a set of configlet. If not used, then module only uses ADD mode. configlet_filter list configlets that can be modified or deleted based on configlets entries. configlets dict yes List of configlets to managed on CVP server. cvp_facts dict yes Facts extracted from CVP servers using cv_facts module state str no present present absent If absent, configlets will be removed from CVP if they are not bound to either a container or a device. If present, configlets will be created or updated.","title":"Module-specific Options"},{"location":"docs/modules/cv_configlet.rst/#examples","text":"--- - name: Test cv_configlet_v2 hosts: cvp connection: local gather_facts: no vars: configlet_list: Test_Configlet: \"! This is a Very First Testing Configlet\\n!\" Test_DYNAMIC_Configlet: \" {{ lookup ( 'file' , 'templates/configlet_' + inventory_hostname + '.txt' ) }} \" tasks: - name: 'Collecting facts from CVP {{ inventory_hostname }} .' tags: - always cv_facts: register: cvp_facts - name: 'Create configlets on CVP {{ inventory_hostname }} .' tags: - provision cv_configlet: cvp_facts: \" {{ cvp_facts.ansible_facts }} \" configlets: \" {{ configlet_list }} \" configlet_filter: [\"New\", \"Test\",\"base-chk\",\"base-firewall\"] register: cvp_configlet","title":"Examples:"},{"location":"docs/modules/cv_configlet.rst/#author","text":"EMEA AS Team (@aristanetworks)","title":"Author"},{"location":"docs/modules/cv_configlet.rst/#status","text":"This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Status"},{"location":"docs/modules/cv_container.rst/","text":"cv_container # Manage Provisioning topology. Module added in version 2.9 Synopsis # CloudVision Portal Configlet configuration requires a dictionary of containers with their parent, to create and delete containers on CVP side. Returns number of created and/or deleted containers Module-specific Options # The following options may be specified for this module: parameter type required default choices comments cvp_facts dict yes Facts from CVP collected by cv_facts module mode str no merge merge override delete Allow to save topology or not topology dict yes Yaml dictionary to describe intended containers Examples: # - name: Create container topology on CVP hosts: cvp connection: local gather_facts: no vars: verbose: False containers: Fabric: parent_container: Tenant Spines: parent_container: Fabric configlets: - container_configlet images: - 4.22.0F devices: - veos01 tasks: - name: \"Gather CVP facts {{ inventory_hostname }} \" cv_facts: register: cvp_facts - name: \"Build Container topology on {{ inventory_hostname }} \" cv_container: cvp_facts: ' {{ cvp_facts.ansible_facts }} ' Author # EMEA AS Team (@aristanetworks) Status # This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Module cv_container"},{"location":"docs/modules/cv_container.rst/#cv_container","text":"Manage Provisioning topology. Module added in version 2.9","title":"cv_container"},{"location":"docs/modules/cv_container.rst/#synopsis","text":"CloudVision Portal Configlet configuration requires a dictionary of containers with their parent, to create and delete containers on CVP side. Returns number of created and/or deleted containers","title":"Synopsis"},{"location":"docs/modules/cv_container.rst/#module-specific-options","text":"The following options may be specified for this module: parameter type required default choices comments cvp_facts dict yes Facts from CVP collected by cv_facts module mode str no merge merge override delete Allow to save topology or not topology dict yes Yaml dictionary to describe intended containers","title":"Module-specific Options"},{"location":"docs/modules/cv_container.rst/#examples","text":"- name: Create container topology on CVP hosts: cvp connection: local gather_facts: no vars: verbose: False containers: Fabric: parent_container: Tenant Spines: parent_container: Fabric configlets: - container_configlet images: - 4.22.0F devices: - veos01 tasks: - name: \"Gather CVP facts {{ inventory_hostname }} \" cv_facts: register: cvp_facts - name: \"Build Container topology on {{ inventory_hostname }} \" cv_container: cvp_facts: ' {{ cvp_facts.ansible_facts }} '","title":"Examples:"},{"location":"docs/modules/cv_container.rst/#author","text":"EMEA AS Team (@aristanetworks)","title":"Author"},{"location":"docs/modules/cv_container.rst/#status","text":"This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Status"},{"location":"docs/modules/cv_device.rst/","text":"cv_device # Provision, Reset, or Update CloudVision Portal Devices. Module added in version 2.9 Synopsis # CloudVison Portal Device compares the list of Devices in in devices against cvp-facts then adds, resets, or updates them as appropriate. If a device is in cvp_facts but not in devices it will be reset to factory defaults If a device is in devices but not in cvp_facts it will be provisioned If a device is in both devices and cvp_facts its configlets and imageBundles will be compared and updated with the version in devices if the two are different. Module-specific Options # The following options may be specified for this module: parameter type required default choices comments configlet_mode str no override override merge delete If override, Add listed configlets and remove all unlisted ones. If merge, Add listed configlets to device and do not touch already configured configlets. cvp_facts dict yes Facts from CVP collected by cv_facts module device_filter list no ['all'] Filter to apply intended mode on a set of configlet. If not used, then module only uses ADD mode. device_filter list devices that can be modified or deleted based on configlets entries. devices dict yes Yaml dictionary to describe intended devices configuration from CVP stand point. state str no present present absent If absent, devices will be removed from CVP and moved back to undefined. If present, devices will be configured or updated. Examples: # --- - name: Test cv_device hosts: cvp connection: local gather_facts: no collections: - arista.cvp vars: configlet_list: cv_device_test01: \"alias a {{ 999 | random }} show version\" cv_device_test02: \"alias a {{ 999 | random }} show version\" # Device inventory for provision activity: bind configlet devices_inventory: veos01: name: veos01 configlets: - cv_device_test01 - SYS_TelemetryBuilderV2_172.23.0.2_1 - veos01-basic-configuration - SYS_TelemetryBuilderV2 tasks: # Collect CVP Facts as init process - name: \"Gather CVP facts from {{ inventory_hostname }} \" cv_facts: register: cvp_facts tags: - always - name: \"Configure devices on {{ inventory_hostname }} \" tags: - provision cv_device: devices: \" {{ devices_inventory }} \" cvp_facts: ' {{ cvp_facts.ansible_facts }} ' device_filter: ['veos'] register: cvp_device - name: \"Add configlet to device on {{ inventory_hostname }} \" tags: - provision cv_device: devices: \" {{ devices_inventory }} \" cvp_facts: ' {{ cvp_facts.ansible_facts }} ' configlet_mode: merge device_filter: ['veos'] register: cvp_device Author # EMEA AS Team (@aristanetworks) Status # This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Module cv_device"},{"location":"docs/modules/cv_device.rst/#cv_device","text":"Provision, Reset, or Update CloudVision Portal Devices. Module added in version 2.9","title":"cv_device"},{"location":"docs/modules/cv_device.rst/#synopsis","text":"CloudVison Portal Device compares the list of Devices in in devices against cvp-facts then adds, resets, or updates them as appropriate. If a device is in cvp_facts but not in devices it will be reset to factory defaults If a device is in devices but not in cvp_facts it will be provisioned If a device is in both devices and cvp_facts its configlets and imageBundles will be compared and updated with the version in devices if the two are different.","title":"Synopsis"},{"location":"docs/modules/cv_device.rst/#module-specific-options","text":"The following options may be specified for this module: parameter type required default choices comments configlet_mode str no override override merge delete If override, Add listed configlets and remove all unlisted ones. If merge, Add listed configlets to device and do not touch already configured configlets. cvp_facts dict yes Facts from CVP collected by cv_facts module device_filter list no ['all'] Filter to apply intended mode on a set of configlet. If not used, then module only uses ADD mode. device_filter list devices that can be modified or deleted based on configlets entries. devices dict yes Yaml dictionary to describe intended devices configuration from CVP stand point. state str no present present absent If absent, devices will be removed from CVP and moved back to undefined. If present, devices will be configured or updated.","title":"Module-specific Options"},{"location":"docs/modules/cv_device.rst/#examples","text":"--- - name: Test cv_device hosts: cvp connection: local gather_facts: no collections: - arista.cvp vars: configlet_list: cv_device_test01: \"alias a {{ 999 | random }} show version\" cv_device_test02: \"alias a {{ 999 | random }} show version\" # Device inventory for provision activity: bind configlet devices_inventory: veos01: name: veos01 configlets: - cv_device_test01 - SYS_TelemetryBuilderV2_172.23.0.2_1 - veos01-basic-configuration - SYS_TelemetryBuilderV2 tasks: # Collect CVP Facts as init process - name: \"Gather CVP facts from {{ inventory_hostname }} \" cv_facts: register: cvp_facts tags: - always - name: \"Configure devices on {{ inventory_hostname }} \" tags: - provision cv_device: devices: \" {{ devices_inventory }} \" cvp_facts: ' {{ cvp_facts.ansible_facts }} ' device_filter: ['veos'] register: cvp_device - name: \"Add configlet to device on {{ inventory_hostname }} \" tags: - provision cv_device: devices: \" {{ devices_inventory }} \" cvp_facts: ' {{ cvp_facts.ansible_facts }} ' configlet_mode: merge device_filter: ['veos'] register: cvp_device","title":"Examples:"},{"location":"docs/modules/cv_device.rst/#author","text":"EMEA AS Team (@aristanetworks)","title":"Author"},{"location":"docs/modules/cv_device.rst/#status","text":"This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Status"},{"location":"docs/modules/cv_device_v1.rst/","text":"cv_device_v1 # Provision, Reset, or Update CloudVision Portal Devices. Module added in version 2.9 Synopsis # CloudVison Portal Device compares the list of Devices in in devices against cvp-facts then adds, resets, or updates them as appropriate. If a device is in cvp_facts but not in devices it will be reset to factory defaults If a device is in devices but not in cvp_facts it will be provisioned If a device is in both devices and cvp_facts its configlets and imageBundles will be compared and updated with the version in devices if the two are different. Module-specific Options # The following options may be specified for this module: parameter type required default choices comments cvp_facts dict yes Facts from CVP collected by cv_facts module device_filter list no ['none'] Filter to apply intended mode on a set of configlet. If not used, then module only uses ADD mode. device_filter list devices that can be modified or deleted based on configlets entries. devices dict yes Yaml dictionary to describe intended devices configuration from CVP stand point. state str no present present absent If absent, devices will be removed from CVP and moved back to undefined. If present, devices will be configured or updated. Examples: # --- - name: Test cv_device hosts: cvp connection: local gather_facts: no collections: - arista.cvp vars: configlet_list: cv_device_test01: \"alias a {{ 999 | random }} show version\" cv_device_test02: \"alias a {{ 999 | random }} show version\" # Device inventory for provision activity: bind configlet devices_inventory: veos01: name: veos01 configlets: - cv_device_test01 - SYS_TelemetryBuilderV2_172.23.0.2_1 - veos01-basic-configuration - SYS_TelemetryBuilderV2 tasks: # Collect CVP Facts as init process - name: \"Gather CVP facts from {{ inventory_hostname }} \" cv_facts: register: cvp_facts tags: - always - name: \"Configure devices on {{ inventory_hostname }} \" tags: - provision cv_device: devices: \" {{ devices_inventory }} \" cvp_facts: ' {{ cvp_facts.ansible_facts }} ' device_filter: ['veos'] register: cvp_device Author # EMEA AS Team (@aristanetworks) Status # This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"cv\\_device\\_v1"},{"location":"docs/modules/cv_device_v1.rst/#cv_device_v1","text":"Provision, Reset, or Update CloudVision Portal Devices. Module added in version 2.9","title":"cv_device_v1"},{"location":"docs/modules/cv_device_v1.rst/#synopsis","text":"CloudVison Portal Device compares the list of Devices in in devices against cvp-facts then adds, resets, or updates them as appropriate. If a device is in cvp_facts but not in devices it will be reset to factory defaults If a device is in devices but not in cvp_facts it will be provisioned If a device is in both devices and cvp_facts its configlets and imageBundles will be compared and updated with the version in devices if the two are different.","title":"Synopsis"},{"location":"docs/modules/cv_device_v1.rst/#module-specific-options","text":"The following options may be specified for this module: parameter type required default choices comments cvp_facts dict yes Facts from CVP collected by cv_facts module device_filter list no ['none'] Filter to apply intended mode on a set of configlet. If not used, then module only uses ADD mode. device_filter list devices that can be modified or deleted based on configlets entries. devices dict yes Yaml dictionary to describe intended devices configuration from CVP stand point. state str no present present absent If absent, devices will be removed from CVP and moved back to undefined. If present, devices will be configured or updated.","title":"Module-specific Options"},{"location":"docs/modules/cv_device_v1.rst/#examples","text":"--- - name: Test cv_device hosts: cvp connection: local gather_facts: no collections: - arista.cvp vars: configlet_list: cv_device_test01: \"alias a {{ 999 | random }} show version\" cv_device_test02: \"alias a {{ 999 | random }} show version\" # Device inventory for provision activity: bind configlet devices_inventory: veos01: name: veos01 configlets: - cv_device_test01 - SYS_TelemetryBuilderV2_172.23.0.2_1 - veos01-basic-configuration - SYS_TelemetryBuilderV2 tasks: # Collect CVP Facts as init process - name: \"Gather CVP facts from {{ inventory_hostname }} \" cv_facts: register: cvp_facts tags: - always - name: \"Configure devices on {{ inventory_hostname }} \" tags: - provision cv_device: devices: \" {{ devices_inventory }} \" cvp_facts: ' {{ cvp_facts.ansible_facts }} ' device_filter: ['veos'] register: cvp_device","title":"Examples:"},{"location":"docs/modules/cv_device_v1.rst/#author","text":"EMEA AS Team (@aristanetworks)","title":"Author"},{"location":"docs/modules/cv_device_v1.rst/#status","text":"This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Status"},{"location":"docs/modules/cv_facts.rst/","text":"cv_facts # Collect facts from CloudVision Portal. Module added in version 2.9 Synopsis # Returns list of devices, configlets, containers and images Module-specific Options # The following options may be specified for this module: parameter type required default choices comments facts list no ['all'] all devices containers configlets tasks List of facts to retrieve from CVP. By default, cv_facts returns facts for devices/configlets/containers/tasks Using this parameter allows user to limit scope to a subet of information. gather_subset list no ['default'] default config tasks_pending tasks_failed tasks_all When supplied, this argument will restrict the facts collected to a given subset. Possible values for this argument include all, hardware, config, and interfaces. Can specify a list of values to include a larger subset. Values can also be used with an initial ! to specify that a specific subset should not be collected. Examples: # --- tasks: - name: '#01 - Collect devices facts from {{ inventory_hostname }} ' cv_facts: facts: devices register: FACTS_DEVICES - name: '#02 - Collect devices facts (with config) from {{ inventory_hostname }} ' cv_facts: gather_subset: config facts: devices register: FACTS_DEVICES_CONFIG - name: '#03 - Collect confilgets facts from {{ inventory_hostname }} ' cv_facts: facts: configlets register: FACTS_CONFIGLETS - name: '#04 - Collect containers facts from {{ inventory_hostname }} ' cv_facts: facts: containers register: FACTS_CONTAINERS - name: '#10 - Collect ALL facts from {{ inventory_hostname }} ' cv_facts: register: FACTS Author # EMEA AS Team (@aristanetworks) Status # This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Module cv_facts"},{"location":"docs/modules/cv_facts.rst/#cv_facts","text":"Collect facts from CloudVision Portal. Module added in version 2.9","title":"cv_facts"},{"location":"docs/modules/cv_facts.rst/#synopsis","text":"Returns list of devices, configlets, containers and images","title":"Synopsis"},{"location":"docs/modules/cv_facts.rst/#module-specific-options","text":"The following options may be specified for this module: parameter type required default choices comments facts list no ['all'] all devices containers configlets tasks List of facts to retrieve from CVP. By default, cv_facts returns facts for devices/configlets/containers/tasks Using this parameter allows user to limit scope to a subet of information. gather_subset list no ['default'] default config tasks_pending tasks_failed tasks_all When supplied, this argument will restrict the facts collected to a given subset. Possible values for this argument include all, hardware, config, and interfaces. Can specify a list of values to include a larger subset. Values can also be used with an initial ! to specify that a specific subset should not be collected.","title":"Module-specific Options"},{"location":"docs/modules/cv_facts.rst/#examples","text":"--- tasks: - name: '#01 - Collect devices facts from {{ inventory_hostname }} ' cv_facts: facts: devices register: FACTS_DEVICES - name: '#02 - Collect devices facts (with config) from {{ inventory_hostname }} ' cv_facts: gather_subset: config facts: devices register: FACTS_DEVICES_CONFIG - name: '#03 - Collect confilgets facts from {{ inventory_hostname }} ' cv_facts: facts: configlets register: FACTS_CONFIGLETS - name: '#04 - Collect containers facts from {{ inventory_hostname }} ' cv_facts: facts: containers register: FACTS_CONTAINERS - name: '#10 - Collect ALL facts from {{ inventory_hostname }} ' cv_facts: register: FACTS","title":"Examples:"},{"location":"docs/modules/cv_facts.rst/#author","text":"EMEA AS Team (@aristanetworks)","title":"Author"},{"location":"docs/modules/cv_facts.rst/#status","text":"This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Status"},{"location":"docs/modules/cv_facts_v1.rst/","text":"cv_facts_v1 # Collect facts from CloudVision Portal. Module added in version 2.9 Synopsis # Returns the list of devices, configlets, containers and images Module-specific Options # The following options may be specified for this module: parameter type required default choices comments gather_subset list no ['default'] default config When supplied, this argument will restrict the facts collected to a given subset. Possible values for this argument include all, hardware, config, and interfaces. Can specify a list of values to include a larger subset. Values can also be used with an initial ! to specify that a specific subset should not be collected. Examples: # --- # Collect CVP Facts as init process - name: \"Gather CVP facts from {{ inventory_hostname }} \" arista.cvp.cv_facts_v1: register: cvp_facts Author # EMEA AS Team (@aristanetworks) Status # This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"cv\\_facts\\_v1"},{"location":"docs/modules/cv_facts_v1.rst/#cv_facts_v1","text":"Collect facts from CloudVision Portal. Module added in version 2.9","title":"cv_facts_v1"},{"location":"docs/modules/cv_facts_v1.rst/#synopsis","text":"Returns the list of devices, configlets, containers and images","title":"Synopsis"},{"location":"docs/modules/cv_facts_v1.rst/#module-specific-options","text":"The following options may be specified for this module: parameter type required default choices comments gather_subset list no ['default'] default config When supplied, this argument will restrict the facts collected to a given subset. Possible values for this argument include all, hardware, config, and interfaces. Can specify a list of values to include a larger subset. Values can also be used with an initial ! to specify that a specific subset should not be collected.","title":"Module-specific Options"},{"location":"docs/modules/cv_facts_v1.rst/#examples","text":"--- # Collect CVP Facts as init process - name: \"Gather CVP facts from {{ inventory_hostname }} \" arista.cvp.cv_facts_v1: register: cvp_facts","title":"Examples:"},{"location":"docs/modules/cv_facts_v1.rst/#author","text":"EMEA AS Team (@aristanetworks)","title":"Author"},{"location":"docs/modules/cv_facts_v1.rst/#status","text":"This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Status"},{"location":"docs/modules/cv_task.rst/","text":"cv_task # Execute or Cancel CVP Tasks. Module added in version 2.9 Synopsis # C l o u d V i s o n P o r t a l T a s k m o d u l e Module-specific Options # The following options may be specified for this module: parameter type required default choices comments state str no executed executed cancelled action to carry out on the task executed - execute tasks cancelled - cancel tasks tasks list yes CVP taskIDs to act on wait int no 0 Time to wait for tasks to transition to 'Completed' Examples: # --- - name: Execute all tasks registered in cvp_configlets variable arista.cvp.cv_task: tasks: \" {{ cvp_configlets.data.tasks }} \" - name: Cancel a list of pending tasks arista.cvp.cv_task: tasks: \" {{ cvp_configlets.data.tasks }} \" state: cancelled # Execute all pending tasks and wait for completion for 60 seconds # In order to get a list of all pending tasks, execute cv_facts first - name: Update cvp facts arista.cvp.cv_facts: - name: Execute all pending tasks and wait for completion for 60 seconds arista.cvp.cv_task: port: ' {{ cvp_port }} ' tasks: \" {{ tasks }} \" wait: 60 Author # EMEA AS Team (@aristanetworks) Status # This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Module cv_tasks"},{"location":"docs/modules/cv_task.rst/#cv_task","text":"Execute or Cancel CVP Tasks. Module added in version 2.9","title":"cv_task"},{"location":"docs/modules/cv_task.rst/#synopsis","text":"C l o u d V i s o n P o r t a l T a s k m o d u l e","title":"Synopsis"},{"location":"docs/modules/cv_task.rst/#module-specific-options","text":"The following options may be specified for this module: parameter type required default choices comments state str no executed executed cancelled action to carry out on the task executed - execute tasks cancelled - cancel tasks tasks list yes CVP taskIDs to act on wait int no 0 Time to wait for tasks to transition to 'Completed'","title":"Module-specific Options"},{"location":"docs/modules/cv_task.rst/#examples","text":"--- - name: Execute all tasks registered in cvp_configlets variable arista.cvp.cv_task: tasks: \" {{ cvp_configlets.data.tasks }} \" - name: Cancel a list of pending tasks arista.cvp.cv_task: tasks: \" {{ cvp_configlets.data.tasks }} \" state: cancelled # Execute all pending tasks and wait for completion for 60 seconds # In order to get a list of all pending tasks, execute cv_facts first - name: Update cvp facts arista.cvp.cv_facts: - name: Execute all pending tasks and wait for completion for 60 seconds arista.cvp.cv_task: port: ' {{ cvp_port }} ' tasks: \" {{ tasks }} \" wait: 60","title":"Examples:"},{"location":"docs/modules/cv_task.rst/#author","text":"EMEA AS Team (@aristanetworks)","title":"Author"},{"location":"docs/modules/cv_task.rst/#status","text":"This module is flagged as preview which means that it is not guaranteed to have a backwards compatible interface.","title":"Status"},{"location":"plugins/","text":"Collections Plugins Directory # arista.cvp collection provides a set of plugins to configure Arista EOS devices with a CloudVision Platform server. List of available modules # arista.cvp.cv_facts - Collect CVP facts from server like list of containers, devices, configlet and tasks. arista.cvp.cv_configlet : Manage configlet configured on CVP. arista.cvp.cv_container : Manage container topology and attach configlet and devices to containers. arista.cvp.cv_device : Manage devices configured on CVP arista.cvp.cv_task : Run tasks created on CVP.","title":"Collections Plugins Directory"},{"location":"plugins/#collections-plugins-directory","text":"arista.cvp collection provides a set of plugins to configure Arista EOS devices with a CloudVision Platform server.","title":"Collections Plugins Directory"},{"location":"plugins/#list-of-available-modules","text":"arista.cvp.cv_facts - Collect CVP facts from server like list of containers, devices, configlet and tasks. arista.cvp.cv_configlet : Manage configlet configured on CVP. arista.cvp.cv_container : Manage container topology and attach configlet and devices to containers. arista.cvp.cv_device : Manage devices configured on CVP arista.cvp.cv_task : Run tasks created on CVP.","title":"List of available modules"},{"location":"roles/dhcp_configuration/","text":"dhcp_configuration role # Ansible role to provision and configure Zero Touch Provisioning on a CloudVision server. Role will do the following: Install DHCP package Activate DHCPd service on CloudVision. Create /etc/dhcp/dhcpd.conf file with relevant information. Reload dhcpd service to apply changes. Requirements # No specific requirements to use this role. Tested Platforms # Below is a list of platforms where DHCPd configuration has been tested: Centos 7 / 8 Ubuntu 18.02 Arista Cloudvision 2019 and onward (for lab purpose) This role should work on any platform running ISC-DHCP server . Note If role is applied to Cloudvision server, DHCP configuration may be erased during upgrade process. Use it at your own risk in a production environment. Role Variables # dhcp_packages : [] < List of packages to install as part of DHCP service. (default is ['dhcp'])> dhcp_packages_state : < Flag to install or remove DHCP package. (default is present)> dhcp_config_dir : < Folder where dhcp config is saved. (default is /etc/dhcp/)> dhcp_config : < Configuration file for DHCP service. (default is {{ dhcp_config_dir }}/dhcpd.conf)> dhcp_service : < Name of the service running on the system for DHCP. (default is dhcpd)> ztp : default : < Section with default value for hosts configuration > registration : < * Default URL to get Script to register to CV or initial configuration > gateway : < Gateway to use by default if not set per device > nameservers : < List of default NS to use on a per host basis > general : < Section to define subnets parameters > subnets : - network : < * Subnet where DHCP will listen for request > netmask : < * Netmask of given subnet > gateway : < Gateway to configure for given subnet > nameservers : < List of name-servers to configure for given subnet > start : < First IP available in the pool > end : < Last IP available in the pool > lease_time : < Maximum lease time before device loose IP. Renewal is max/2 > clients : < List of clients on a mac-address basis > - name : < * Hostname to provide when device do a DHCP request > mac : < * Mac address of the host. Mac address value MUST be protected by either single or dual quotes > ip4 : < * IP Address of the host > registration : < Registration URL to use for the host. If not set, default value will be applied > gateway : < Gateway to use for the host. If not set, default value will be applied > nameservers : < List of NS to use for the host. If not set, default value will be applied > Variables with * are mandatory, others are optional and might be skipped if not needed in your setup. Dependencies # No dependency required for this role. Example Playbook # Below is a basic playbook running arista.cvp.dhcp_configuration role --- - name : Configure DHCP service on CloudVision hosts : dhcp_server collection : - arista.cvp vars : ztp : default : registration : 'http://10.255.0.1/ztp/bootstrap' gateway : 10.255.0.3 nameservers : - '10.255.0.3' general : subnets : - network : 10.255.0.0 netmask : 255.255.255.0 gateway : 10.255.0.3 nameservers : - '10.255.0.3' start : 10.255.0.200 end : 10.255.0.250 lease_time : 300 clients : - name : DC1-SPINE1 mac : '0c:1d:c0:1d:62:01' ip4 : 10.255.0.11 - name : DC1-SPINE2 mac : '0c:1d:c0:1d:62:02' ip4 : 10.255.0.12 - name : DC1-LEAF1A mac : '0c:1d:c0:1d:62:11' ip4 : 10.255.0.13 tasks : - name : 'Execute DHCP configuration role' import_role : name : arista.cvp.dhcp_configuration Inventory is configured like below: --- all : children : CVP : hosts : dhcp_server : ansible_host : 1.1.1.1 ansible_user : root ansible_password : password If you are not using root user, please also add ansible_become_password . By default, ansible_become_password is set to be equal to ansible_password SSH connection is managed by paramiko . License # Project is published under Apache 2.0 License","title":"DHCP Configuration role"},{"location":"roles/dhcp_configuration/#dhcp_configuration-role","text":"Ansible role to provision and configure Zero Touch Provisioning on a CloudVision server. Role will do the following: Install DHCP package Activate DHCPd service on CloudVision. Create /etc/dhcp/dhcpd.conf file with relevant information. Reload dhcpd service to apply changes.","title":"dhcp_configuration role"},{"location":"roles/dhcp_configuration/#requirements","text":"No specific requirements to use this role.","title":"Requirements"},{"location":"roles/dhcp_configuration/#tested-platforms","text":"Below is a list of platforms where DHCPd configuration has been tested: Centos 7 / 8 Ubuntu 18.02 Arista Cloudvision 2019 and onward (for lab purpose) This role should work on any platform running ISC-DHCP server . Note If role is applied to Cloudvision server, DHCP configuration may be erased during upgrade process. Use it at your own risk in a production environment.","title":"Tested Platforms"},{"location":"roles/dhcp_configuration/#role-variables","text":"dhcp_packages : [] < List of packages to install as part of DHCP service. (default is ['dhcp'])> dhcp_packages_state : < Flag to install or remove DHCP package. (default is present)> dhcp_config_dir : < Folder where dhcp config is saved. (default is /etc/dhcp/)> dhcp_config : < Configuration file for DHCP service. (default is {{ dhcp_config_dir }}/dhcpd.conf)> dhcp_service : < Name of the service running on the system for DHCP. (default is dhcpd)> ztp : default : < Section with default value for hosts configuration > registration : < * Default URL to get Script to register to CV or initial configuration > gateway : < Gateway to use by default if not set per device > nameservers : < List of default NS to use on a per host basis > general : < Section to define subnets parameters > subnets : - network : < * Subnet where DHCP will listen for request > netmask : < * Netmask of given subnet > gateway : < Gateway to configure for given subnet > nameservers : < List of name-servers to configure for given subnet > start : < First IP available in the pool > end : < Last IP available in the pool > lease_time : < Maximum lease time before device loose IP. Renewal is max/2 > clients : < List of clients on a mac-address basis > - name : < * Hostname to provide when device do a DHCP request > mac : < * Mac address of the host. Mac address value MUST be protected by either single or dual quotes > ip4 : < * IP Address of the host > registration : < Registration URL to use for the host. If not set, default value will be applied > gateway : < Gateway to use for the host. If not set, default value will be applied > nameservers : < List of NS to use for the host. If not set, default value will be applied > Variables with * are mandatory, others are optional and might be skipped if not needed in your setup.","title":"Role Variables"},{"location":"roles/dhcp_configuration/#dependencies","text":"No dependency required for this role.","title":"Dependencies"},{"location":"roles/dhcp_configuration/#example-playbook","text":"Below is a basic playbook running arista.cvp.dhcp_configuration role --- - name : Configure DHCP service on CloudVision hosts : dhcp_server collection : - arista.cvp vars : ztp : default : registration : 'http://10.255.0.1/ztp/bootstrap' gateway : 10.255.0.3 nameservers : - '10.255.0.3' general : subnets : - network : 10.255.0.0 netmask : 255.255.255.0 gateway : 10.255.0.3 nameservers : - '10.255.0.3' start : 10.255.0.200 end : 10.255.0.250 lease_time : 300 clients : - name : DC1-SPINE1 mac : '0c:1d:c0:1d:62:01' ip4 : 10.255.0.11 - name : DC1-SPINE2 mac : '0c:1d:c0:1d:62:02' ip4 : 10.255.0.12 - name : DC1-LEAF1A mac : '0c:1d:c0:1d:62:11' ip4 : 10.255.0.13 tasks : - name : 'Execute DHCP configuration role' import_role : name : arista.cvp.dhcp_configuration Inventory is configured like below: --- all : children : CVP : hosts : dhcp_server : ansible_host : 1.1.1.1 ansible_user : root ansible_password : password If you are not using root user, please also add ansible_become_password . By default, ansible_become_password is set to be equal to ansible_password SSH connection is managed by paramiko .","title":"Example Playbook"},{"location":"roles/dhcp_configuration/#license","text":"Project is published under Apache 2.0 License","title":"License"}]}